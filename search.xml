<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVASE高级（一）</title>
    <url>/2024/11/10/JAVASE%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1>JAVASE高级（一）</h1>
<h2 id="1-面向对象编程">1. 面向对象编程</h2>
<h3 id="1-1-面向对象基础">1.1 面向对象基础</h3>
<p>在班里有多个学生，每个学生可以看作一个对象，属性包括姓名、成绩等。</p>
<ul>
<li>开发对象，调用对象对数据处理。</li>
<li>面向对象的好处：符合人类思维习惯，变成更简单、更直观。</li>
<li>对象的本质：一种特殊的数据结构。</li>
<li>对象怎么设计：class也是类，也被称为对象的设计图（模板）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">    <span class="number">1.</span>变量，对象的数据。;</span><br><span class="line">    <span class="number">2.</span>方法，描述对象的功能。;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象：</span></span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();<span class="comment">//Student s1 = new Student();</span></span><br></pre></td></tr></table></figure>
<ul>
<li>多个变量指向一个对象，地址赋值（类似于浅拷贝）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s1.name = <span class="string">&quot;alex&quot;</span>;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> s1;</span><br><span class="line">s2.name = <span class="string">&quot;bob&quot;</span>;</span><br><span class="line">System.out.println(s1.name);<span class="comment">//&quot;bob&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-面向对象内容">1.2 面向对象内容</h3>
<ul>
<li>
<p><strong>this变量</strong>：this是一个变量，可以用在方法里，来拿到当前对象。</p>
</li>
<li>
<p><strong>构造器</strong>：创建对象时，对象会调用构造器。如果不写构造器，java会创建一个无参构造器。一旦定义了有参构造器，系统不会自动生成无参构造器。</p>
</li>
<li>
<p>面向对象的三大特征：<strong>封装、继承和多态</strong>。</p>
</li>
<li>
<p><strong>封装</strong>：就是用类设计对象处理某一个事物的数据时，应该把要处理的数据，以及处理这些数据的方法设计到一个对象中去。公共：public，私有：private。</p>
</li>
<li>
<p><strong>JavaBean实体类</strong>：特殊形式的类。</p>
<ul>
<li>满足：类中成员变量要私有，要有对外提供的set、get方法。类中必须要有一个公共无参的构造器。</li>
<li>实体类的应用场景：实体类只负责数据存取，而数据的处理交给其他类来完成，以实现数据和数据处理业务分离。</li>
</ul>
</li>
</ul>
<p><img src="/img/JAVASE%E9%AB%98%E7%BA%A7/image-20241111172717546.png" alt="image-20241111172717546"></p>
<h2 id="2-Java-API">2. Java API</h2>
<p>包上用来分门别类地管理不同程序，有利于程序的管理和维护</p>
<h3 id="2-1-String">2.1 String</h3>
<p><img src="/img/JAVASE%E9%AB%98%E7%BA%A7/image-20241111185416810.png" alt="image-20241111185416810"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span><span class="string">&quot;absaaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Absaaa&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">s1.equals(s2);<span class="comment">//false</span></span><br><span class="line">s1.equalsIgnoreCase(s2);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1.substring(<span class="number">3</span>));<span class="comment">//包前不包后,(aaa)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;这个电影简直是个垃圾，垃圾电影！&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> info.replace(<span class="string">&quot;垃圾&quot;</span>,<span class="string">&quot;**&quot;</span>);</span><br><span class="line">System.out.println(info.contains(<span class="string">&quot;垃圾&quot;</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(info.startsWith(<span class="string">&quot;这个&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zz,zhw&quot;</span>;</span><br><span class="line">String[] names = name.split(<span class="string">&#x27;,&#x27;</span>);<span class="comment">//[zz,zhw]</span></span><br></pre></td></tr></table></figure>
<p>String注意事项：</p>
<ul>
<li>
<p>String的对象是不可变的，改变会指向新的地址。</p>
</li>
<li>
<p>只要是以双引号给出的字符串对象，存储在常量池中，而且内容只会存储一份。</p>
</li>
<li>
<p>new String创建字符串对象，每次new出来都是一个新对象，放在堆内存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line">Syste.out.println(s1 == s2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-2-ArrayList">2.2 ArrayList</h3>
<ul>
<li>集合：集合是一种容器，用来装数据，类似于数组。</li>
<li>相对于数组，集合大小可变，开发中用的更多。</li>
</ul>
<p><img src="/img/JAVASE%E9%AB%98%E7%BA%A7/image-20241111195655502.png" alt="image-20241111195655502"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//推荐</span></span><br><span class="line">list.add(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[&quot;你好&quot;,666];</span></span><br><span class="line">list.add(<span class="number">1</span>,<span class="string">&quot;MYSQL&quot;</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[&quot;你好&quot;,MYSQL];</span></span><br><span class="line"><span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">System.out.println(list.size());<span class="comment">//2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">remove</span> <span class="operator">=</span> list.remove(<span class="number">1</span>);<span class="comment">//remove = MYSQL</span></span><br><span class="line">System.out.println(list);<span class="comment">//[&quot;你好&quot;];</span></span><br><span class="line">System.out.println(list.remove(<span class="string">&quot;你好&quot;</span>));<span class="comment">//[];默认删除第一次遇见的数据</span></span><br><span class="line">list.add(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">System.out.println(list.set(<span class="number">1</span>,<span class="string">&quot;你好&quot;</span>));<span class="comment">//[&quot;你好&quot;,&quot;你好&quot;];</span></span><br></pre></td></tr></table></figure>
<h2 id="3-面向对象高级">3. 面向对象高级</h2>
<h3 id="3-1-static">3.1 static</h3>
<ul>
<li>
<p>定义：static叫静态，可以修饰成员变量、成员方法。</p>
<ul>
<li>类变量对应实例变量，类变量只有一份，会被类的全部对象共享，实例变量也被称为对象的变量。</li>
<li>访问：类名.类变量、对象.实例变量。</li>
</ul>
</li>
<li>
<p>类方法和实例方法：有无</p>
<ul>
<li>访问：类名.类方法</li>
<li>注意事项：
<ul>
<li>类方法可以直接访问类的成员。不可以直接访问实例成员。</li>
<li>实例方法可以直接访问类成员，也可以直接访问实例成员。</li>
<li>实例方法可以出现this关键字，类方法不可以出现this关键字。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>代码块，实现类的初始化，为类变量赋值</p>
</li>
<li>
<p>实例代码块：每次创建对象时，在构造器前执行。</p>
</li>
<li>
<p>单例设计模式： 确保一个类只有一个对象</p>
<ul>
<li>私有类的构造器</li>
<li>定义一个类变量记住类的一个对象</li>
</ul>
</li>
</ul>
<h3 id="3-2-继承">3.2 继承</h3>
<ul>
<li>
<p>定义：java提供的关键字extends，可以与另一个类建立父子关系。</p>
<ul>
<li>特点：继承父类的非私有成员。</li>
<li>创建：子类的对象由子类、父类共同完成。</li>
</ul>
</li>
<li>
<p>权限修饰符：protected、缺省</p>
<ul>
<li>protected可以在子类中访问，子类对象不可以访问</li>
<li>缺省可以在同目录中访问。</li>
</ul>
</li>
<li>
<p>方法重写：子类可以重写一个方法名称、参数列表一样的方法，覆盖父类的方法，即为方法重写。</p>
<ul>
<li>函数上方<strong>加上@Override</strong>表示重写（更加安全）。</li>
<li>访问权限必须大于等于父类的权限。</li>
<li>返回值类型需要类型一致或者更小。</li>
<li>私有、静态方法不能被重写。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//就近原则</span></span><br><span class="line">System.out.println(name);<span class="comment">//函数内name</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.name);<span class="comment">//子类内name</span></span><br><span class="line">System.out.println(<span class="built_in">super</span>.name);<span class="comment">//父类内name</span></span><br></pre></td></tr></table></figure>
<ul>
<li>子类构造器的特点：
<ul>
<li>先构造父亲，再构造自己。利用可省略的super调用父类有参构造器。</li>
</ul>
</li>
</ul>
<h3 id="3-3-多态">3.3 多态</h3>
<ul>
<li>
<p>定义：多态是在继承\实现情况吓得一种现象，表现为：对象多态、行为多态。</p>
</li>
<li>
<p>前提：有继承、实现关系；存在父类引用子类对象；存在方法重写</p>
</li>
<li>
<p>对于方法：<strong>编译看左边，运行看右边</strong>,对于变量：编译看左边，运行看左边。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">People</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"><span class="type">People</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//行为多态</span></span><br><span class="line">p.run();<span class="comment">//&quot;Teacher&quot;</span></span><br><span class="line">p2.run();<span class="comment">//&quot;Student&quot;</span></span><br><span class="line">System.out.println(p.name);<span class="comment">//父类people</span></span><br><span class="line">System.out.println(p2.name);<span class="comment">//父类people</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用多态的好处:
<ul>
<li>多态形式下，右边对象是**“解耦合的”**，便于扩展和维护。</li>
<li>可以使用父类类型的变量作为形参，可以接收一切子类对象。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">void</span> <span class="params">(People p)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>存在的问题：多态情况下不能调用子类的独有方法。→类型转换</li>
<li>强转前，可以使用instanceof判断</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">People</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher)p;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)p;<span class="comment">//强制类型转换异常</span></span><br><span class="line">p <span class="keyword">instanceof</span> Student;<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-final关键字、常量">3.4 final关键字、常量</h3>
<ul>
<li>
<p>final关键字是最终的意思，可以修饰（类、方法、变量）。</p>
<ul>
<li>修饰的该类被称为最终类，特点是不能被继承了</li>
<li>修饰的方法被称为最终方法，特点是不能被重写了</li>
<li>修饰变量：只能被修饰一次。（局部变量、成员变量）</li>
</ul>
</li>
<li>
<p>常量：使用static final修饰的成员变量被称为常量，通常用于记录系统的配置信息。</p>
</li>
</ul>
<h3 id="3-5-抽象类">3.5 抽象类</h3>
<ul>
<li>
<p>Java中有个关键字为abstract，可以修饰类、方法等。</p>
</li>
<li>
<p>抽象类的注意事项、特点：</p>
<ul>
<li>抽象类中不一定有抽象方法，有抽象方法一定是抽象类。</li>
<li>抽象类最主要的特点：不能创建对象，仅作为一种特殊的父类让子类继承实现。</li>
<li>一个类继承了抽象类，必须重写抽象类的全部抽象方法，否则自己也是抽象类。</li>
</ul>
</li>
<li>
<p>设计抽象类是为了更好地支持多态。</p>
</li>
<li>
<p>常见应用场景：模板方法设计模式。建议使用final修饰模板方法（防止使用子类重写）。</p>
</li>
</ul>
<h3 id="3-6-接口">3.6 接口</h3>
<ul>
<li>Java提供关键字Interface，用这个关键字可以定义一个特殊的结构：接口。</li>
<li>接口不能创建对象；接口是用来被类实现（implements）的，实现接口的类被称为实现类。</li>
<li>一个类可以实现对个借口哦，实现类实现多个接口，必须重写完全部接口的全部抽象方法，否则实现类需要定义为抽象类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">B</span>, C&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>好处：
<ul>
<li>可以解决单类继承的问题。</li>
<li>面向接口编程，实现业务的灵活切换与拓展。</li>
</ul>
</li>
</ul>
<h3 id="3-7-内部类">3.7 内部类</h3>
<ul>
<li>
<p>成员内部类、静态内部类</p>
</li>
<li>
<p>匿名内部类：程序员不需要为这个类声明名字。</p>
<ul>
<li>
<p>匿名内部类本质上是一个子类，并会立即创建出一个子类对象。</p>
</li>
<li>
<p>作用：用于更加方便的创建一个子类对象。</p>
</li>
<li>
<p>通常作为一个参数传输给方法。</p>
</li>
</ul>
</li>
</ul>
<p><img src="/img/JAVASE%E9%AB%98%E7%BA%A7/image-20241116101608170.png" alt="image-20241116101608170"></p>
<h3 id="3-8-枚举">3.8 枚举</h3>
<ul>
<li>枚举类的第一行只能罗列一些名称，这些名称都是常量，并且每个常量记住的都是枚举类的一个对象。</li>
<li>枚举类的构造器都是私有的，对外不能创建对象。</li>
<li>不可以被继承。</li>
</ul>
<h3 id="3-9-泛型">3.9 泛型</h3>
<ul>
<li>定义类、接口方法时，同时声明了一个或多个类型变量如<E>、称为泛型类、反省接口</li>
<li>？通配符，在使用泛型时可以代表一切类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上限继承，类型可以为Car或者Car的子类</span></span><br><span class="line"><span class="comment">//extends car为上限，super car为下限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(ArrayList&lt;? extends Cat&gt; cars)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(ArrayList&lt;T&gt; cars)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意事项：
<ul>
<li>泛型擦除：泛型是在编译阶段，一旦被编译为class文件，就不存在泛型</li>
<li>泛型不支持基本数据类型，只能支持对象类型。</li>
</ul>
</li>
</ul>
<h3 id="3-10-常用api">3.10 常用api</h3>
<ul>
<li>Object类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下方法可进行重写，实现进一步功能（如内容）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>;<span class="comment">//返回对象的字符串的表示形式（默认地址）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>;<span class="comment">//判断两个对象是否相等（地址）</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span>;<span class="comment">//对象克隆，protected修饰</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法是浅克隆（浅拷贝）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedExcepted&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User) u1.clone();</span><br></pre></td></tr></table></figure>
<ul>
<li>Objects类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object s, Object b)</span>;<span class="comment">//先做非空对象，然后比较两个对象</span></span><br><span class="line"><span class="comment">//利用Objects.equal避免空指针，更安全，更好</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNull</span><span class="params">(Object obj)</span>;<span class="comment">//判断对象是否为null，为null则为true</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">nonNull</span><span class="params">(Object obj)</span>;<span class="comment">//上述取反</span></span><br></pre></td></tr></table></figure>
<ul>
<li>包装类
<ul>
<li>把基本类型包装为类</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">int</span> → Integer;</span><br><span class="line"><span class="type">char</span> → Character;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Integer.toString(a);<span class="comment">//把基本类型的数据转为字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);<span class="comment">//把字符串类型转为对应的基本类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.valueOf(agestr);</span><br><span class="line"><span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> Double.parseDouble(ageStr);<span class="comment">//把字符串类型转为对应的基本类型</span></span><br></pre></td></tr></table></figure>
<ul>
<li>StringBuilder
<ul>
<li>StringBuilder代表可变字符串对象，相当于一个容器，里面的字符串是可变的，可以用来操作字符串。</li>
<li>StringBuilder比String更适合做字符串的修改操作，效率更高，代码更简洁。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuilder</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuilder</span><span class="params">(String str)</span>;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(任意类型)</span>;<span class="comment">//添加数据并返回StringBuilder本身</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">reverse</span><span class="params">()</span>;<span class="comment">//将对象的内容反转</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">toString</span><span class="params">()</span>;<span class="comment">//转为String</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>StringBuffer</p>
<ul>
<li>与StringBuilder一模一样</li>
<li>StringBuilder是线程不安全的，StringBuffer是线程安全的。</li>
</ul>
</li>
<li>
<p>StringJoiner</p>
<ul>
<li>用来操作字符串，可以看成一个容器，创建后的内容可变。</li>
<li>好处：不仅可以提高字符串的操作效率，在有些场景下用它操作字符串，代码更加简洁。</li>
</ul>
</li>
<li>
<p>Math</p>
<ul>
<li>提供对数据操作的静态方法。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">abs</span><span class="params">()</span>;<span class="comment">//绝对值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">()</span>;<span class="comment">//向上取整</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">()</span>;<span class="comment">//向下取整</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">round</span><span class="params">()</span>;<span class="comment">//四舍五入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> a ,<span class="type">double</span> b)</span>;<span class="comment">//取次方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">random</span><span class="params">()</span>;<span class="comment">//取随机数【0.0，1.0）</span></span><br></pre></td></tr></table></figure>
<ul>
<li>System</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span>;<span class="comment">//终止虚拟机，一般不要用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>;<span class="comment">//获取当前电脑时间，判断程序的运行时间</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Runtime
<ul>
<li>代表程序所在的运行时间，是一个单例类。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">r.availableProcessors();<span class="comment">//返回Java虚拟机中的处理器数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> r.totalMemory()&#123;&#125;<span class="comment">//可用内存容量：freeMemory()</span></span><br><span class="line">r.totalMemory()/<span class="number">1024.0</span>/<span class="number">1024.0</span>;<span class="comment">//返回虚拟机的内存（MB）</span></span><br><span class="line"><span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> r.exec(<span class="string">&quot;path&quot;</span>);<span class="comment">//启动某个路径的文件</span></span><br><span class="line">Tread.sleep(<span class="number">5000</span>);</span><br><span class="line">p.destroy();<span class="comment">//销毁，关闭程序</span></span><br></pre></td></tr></table></figure>
<ul>
<li>BigDecimal
<ul>
<li>用于解决浮点型运算时，出现结果失真的问题。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BigDecimal</span><span class="params">(String val)</span>;<span class="comment">//构造器</span></span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">a1</span>  <span class="operator">=</span> BigDecimal.valueOf(a);<span class="comment">//a为double类型</span></span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b1</span>  <span class="operator">=</span> BigDecimal.valueOf(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">c1</span> <span class="operator">=</span> a1.add(b1);<span class="comment">//substract,multiply,divide</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">k</span> <span class="operator">=</span> i.divide(j,<span class="number">2</span>,RoundingMode:HALF_UP);<span class="comment">//除法（0.1/0.3）</span></span><br><span class="line"><span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> k.doubelValue();<span class="comment">//转为double</span></span><br></pre></td></tr></table></figure>
<ul>
<li>日期和时间(传统)
<ul>
<li>Date</li>
<li>SimpleDateFormat</li>
<li>Calendar</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(d);<span class="comment">//系统当前时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d.getTime();<span class="comment">//拿到时间毫秒值</span></span><br><span class="line">time +=<span class="number">2</span>*<span class="number">1000</span>;</span><br><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(time);<span class="comment">//2秒之后的时间</span></span><br><span class="line">d2.setTime(time);<span class="comment">//设置时间</span></span><br><span class="line"><span class="comment">//SimpleDateFormat,格式化日期对象</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">re</span> <span class="operator">=</span> sdf.format(d);</span><br><span class="line">System.out.println(rs);<span class="comment">//2024年11月16日 17：02：24 周六 下午</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2024-11-16 12:12:11&quot;</span>;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> sdf2.parse(dateStr);<span class="comment">//解析String类</span></span><br><span class="line"><span class="comment">//Calendar</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">date</span> <span class="operator">=</span> Calendar.getIntance();</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> date.get(Calendar.YEAR);</span><br><span class="line"><span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">date.set(Calendar.MONTH,<span class="number">9</span>);<span class="comment">//设置时间</span></span><br><span class="line">date.add(Calendar.DAY_OF_YEAR,<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>日期和时间（jdk8之后）
<ul>
<li>LocalDate、LocalTime、LocalDateTime</li>
<li>ZoneId、ZoneDateTime</li>
<li>Period、Duration</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LocalDate、LocalTime、LocalDateTime</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> LocalDate.now();<span class="comment">//年月日（日期）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> ld.getYear();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> ld.withYear(<span class="number">2099</span>);<span class="comment">//localDate为不可变对象</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld3</span> <span class="operator">=</span> LocalDate.of(<span class="number">2099</span>,<span class="number">12</span>,<span class="number">12</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ld4</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> ld4.toLocalDate();</span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">lt</span> <span class="operator">=</span> ld4.toLocalTime();</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ld5</span> <span class="operator">=</span> LocalDateTime.of(ld,lt);</span><br><span class="line">equals\isBefore\isAfter;</span><br><span class="line"><span class="comment">//ZoneId\ZoneDateTime</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId1</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now(zoneId1);</span><br><span class="line"><span class="comment">//Instant(秒、纳秒)</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/JAVASE%E9%AB%98%E7%BA%A7/image-20241118144141174.png" alt="image-20241118144141174"></p>
<ul>
<li>Arrays</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> []arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));<span class="comment">//[10,20,30,40,50]</span></span><br><span class="line"><span class="type">int</span> []arr2 = Arrays.copyOfRange(arr,<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//[20,30,40]</span></span><br><span class="line"><span class="type">int</span> []arr3 = Arrays.copyOf(arr,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Arrays实现类对象的比较：重写Comparable接口，重写compareTo方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o.age - <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种方法Comparator比较器</span></span><br><span class="line">Arrays.sort(students, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1,Stdent o2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(o1.getHeight(),o2.getHeight());      </span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>Lambda表达式
<ul>
<li>Lambda表达式是JDK8开始新增的一种语法形式，用于简化匿名内部类的代码。</li>
<li>lambda表达式并不是能简化全部匿名内部类的写法，只能简化函数式接口的匿名内部类</li>
<li>函数式接口：有且仅有一个抽象方法的接口。标记：@FunctionalInterface</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swimming</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Swimming</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swimming</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生快乐游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Swimming</span> <span class="variable">s</span> <span class="operator">=</span>()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;学生快乐游泳&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line">Arrays.sort(students, ( o1, o2) -&gt;Double.compare(o1.getHeight(),o2.getHeight()));</span><br></pre></td></tr></table></figure>
<ul>
<li>方法引用
<ul>
<li>静态方法引用：标志（：：）</li>
<li>特定类型的引用：如果在Lambda表达式中只是调用一个实例方法，并且参数列表中的第一个参数是作为方法的主调，后面的所有参数是作为该实例方法的入参时，可以使用特定类型的方法引用。</li>
<li>构造器引用：不常见</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareByData</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareByAge</span><span class="params">(Student o1,Student o2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareByAgeDesc</span><span class="params">(Student o1,Student o2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getAge()-o1.getAge();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法引用</span></span><br><span class="line">Arrays.sort(students,(o1,o2)-&gt;o1.getAge()-o2.getAge());</span><br><span class="line">Arrays.sort(students,(o1,o2)-&gt;CompareByData.compareByAge(o1,o2));</span><br><span class="line">Arrays.sort(students,CompareByData::compareByAge);</span><br><span class="line"><span class="comment">//实例方法引用</span></span><br><span class="line"><span class="type">CompareByData</span> <span class="variable">compare</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompareByData</span>();</span><br><span class="line">Arrays.sort(students,compare::compareByAgeDesc);<span class="comment">//降序</span></span><br><span class="line"><span class="comment">//特定类型的引用</span></span><br><span class="line">Arrays.sort(names,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1,String o2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareToIgnoreCase(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Arrays.sort(names,(o1, o2)-&gt;o1.compareToIgnoreCase(o2));</span><br><span class="line">Arrays.sort(names,String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Holmes-VAD</title>
    <url>/2024/10/31/Holmes-VAD/</url>
    <content><![CDATA[<h1>Holmes-VAD</h1>
<h2 id="Abstract">Abstract</h2>
<p>为了应对开放式的视频异常检测（VAD），现有方法在面对具有挑战性或未见过的事件时，往往表现出偏向性，并且缺乏可解释性。为了解决这些问题，本文提出了Holmes-VAD，一个新颖的框架，通过精确的时间定位和丰富的多模态指令，实现了准确的异常定位和全面的解释性。首先，针对无偏且可解释的VAD系统，我们构建了第一个<strong>大规模的多模态VAD指令微调基准</strong>，即VAD-Instruct50k。这个数据集使用精心设计的半自动标注范式创建，采用<strong>高效的单帧注释应用于收集的未裁剪视频</strong>，然后利用强大的现成视频字幕生成器和大规模语言模型（LLM）将其合成为高质量的异常和正常视频片段分析。在VAD-Instruct50k数据集的基础上，我们开发了一种定制化的可解释视频异常检测解决方案。我们训练了一个轻量级的时间采样器，用于选择高异常响应的帧，并微调一个多模态的大语言模型生成解释性内容。大量实验结果验证了Holmes-VAD的通用性和可解释性，确立了其作为真实世界视频异常分析的新型可解释技术。</p>
<h2 id="1-Introduction-介绍">1. Introduction(介绍)</h2>
<h3 id="1-1-VAD的背景">1.1 VAD的背景</h3>
<p>同LAVAD。</p>
<p>视频异常检测旨在识别视频中不寻常或异常的事件，近年来在公共安全和视频内容理解等领域得到了广泛研究。</p>
<p>现有的VAD方法可以分为三类：无监督、弱监督和全监督方法。</p>
<ul>
<li><strong>无监督方法</strong>：只在正常视频上进行训练或使用未标注的正常/异常视频，但由于没有可靠的异常帧监督，这些方法在面对未见过的正常数据时往往表现不佳。</li>
<li><strong>弱监督方法</strong>：使用视频级标签（即标注整个视频是否异常）进行训练，但难以在视频级别监督下选择合适的片段用于训练。</li>
<li><strong>全监督方法</strong>：需要逐帧标注，这非常耗时且成本高昂，因此很少得到应用。</li>
</ul>
<p>最近，受在海量数据上预先训练的多模态大型语言模型（MLLMs）的强大代表性及其在许多下游视觉任务中令人印象深刻的进步的启发，许多人开始将多模态知识整合到 VAD 系统中，从而实现更精确的异常检测。</p>
<h3 id="1-2现有方法的挑战：">1.2现有方法的挑战：</h3>
<ul>
<li><strong>偏向性问题</strong>：由于缺乏可靠的帧级异常监督，现有的无监督和弱监督方法在面对未见过的正常场景时容易产生偏差，无法准确地检测异常。</li>
<li><strong>缺乏可解释性</strong>：大多数现有的VAD方法在检测异常时，无法提供“异常是什么”以及“为什么是异常”的解释，限制了系统的透明度和用户的理解。</li>
</ul>
<p><img src="/img/Holmes-VAD.assets/image-20241031153044614.png" alt="image-20241031153044614"></p>
<blockquote>
<p><strong>图一：</strong> **实现无偏和可解释的 VAD。**与主要专注于识别异常的主流 VAD 方法（a）相比，我们的方法（b）通过构建一个大规模的 VAD  数据集，其中包含未剪辑视频的单帧注释和剪辑视频的可解释指令数据，不仅有助于无偏见地（即减少对容易融合或未见常态的误报）预测异常分数，还有助于解释检测到的异常。</p>
</blockquote>
<h3 id="1-3-解决方法与技术创新">1.3 解决方法与技术创新</h3>
<p>为了实现无偏且可解释的异常检测，Holmes-VAD框架提出了以下几项创新：</p>
<ul>
<li>
<p><strong>单帧标注（Single-frame annotation）</strong>：现有的监督方法由于逐帧标注的高昂成本，很难大规模应用。为此，作者提出了一种更高效的标注方法，即单帧标注。通过在异常事件中仅标注一个关键帧，可以显著降低标注的时间成本。这种单帧标注的方式在视频异常检测中有助于减少对全面标注的依赖，同时仍然能提供有效的监督信号。</p>
</li>
<li>
<p><strong>VAD-Instruct50k数据集</strong>：为了解决数据稀缺问题，作者构建了一个大规模的多模态视频异常检测数据集，称为<strong>VAD-Instruct50k</strong>。该数据集通过半自动标注生成，包含了大量的单帧注释视频以及异常事件的文本描述。具体过程如下：</p>
<ol>
<li><strong>数据收集</strong>：从现有的VAD数据集中收集未剪辑的视频（如UCF-Crime和XD-Violence）。</li>
<li><strong>事件标注</strong>：通过人类和现有的自动化工具对异常视频中的关键帧进行单帧标注。</li>
<li><strong>指令构建</strong>：使用大语言模型（LLM）为异常事件生成详细的文本解释，通过与视频内容结合，生成关于“什么是异常”和“为什么是异常”的指令对话数据。</li>
</ol>
</li>
<li>
<p><strong>模型的设计与训练</strong>：基于VAD-Instruct50k数据集，作者开发并训练了Holmes-VAD模型。该模型包含三个主要组件：</p>
</li>
</ul>
<ol>
<li><strong>视频编码器（Video Encoder）</strong>：用于对输入的视频进行编码，提取视频特征。</li>
<li><strong>时间采样器（Temporal Sampler）</strong>：预测视频帧的异常分数，并采样高响应部分作为多模态LLM的输入，具有轻量级和高效推理的特点。</li>
<li><strong>多模态大语言模型（Multi-modal LLM）</strong>：在结合视频特征的基础上，生成关于检测到的异常事件的文本解释。</li>
</ol>
<p>作者还通过实验验证了Holmes-VAD的有效性和可解释性，结果表明该方法在异常检测任务中性能优越，并能够提供详细的解释内容。</p>
<h2 id="2-相关工作">2. 相关工作</h2>
<h3 id="2-1-视频异常检测相关工作">2.1. 视频异常检测相关工作</h3>
<ul>
<li>讨论了现有的视频异常检测方法，特别是无监督、弱监督和全监督方法的现状与挑战。无监督方法通常在正常视频上进行训练，弱监督方法使用视频级别标签，而全监督方法由于逐帧标注的高成本应用较少。</li>
<li>进一步分析了近年来VAD领域的研究进展，包括基于深度学习的方法和如何提升异常检测的精度和效率。</li>
</ul>
<h3 id="2-2-多模态大语言模型（MLLM）">2.2. 多模态大语言模型（MLLM）</h3>
<ul>
<li>多模态大语言模型最近的进展，例如CLIP等模型，在视觉和语言的结合上取得了显著进展。该部分讨论了如何利用MLLM来增强异常检测系统的解释性。</li>
<li>涉及到的模型可能包括ChatGPT、LLaMA等，它们在文本生成和视觉理解上的表现，为多模态数据处理提供了基础。</li>
</ul>
<h3 id="2-3-多模态VAD">2.3 多模态VAD</h3>
<p>多模态视频异常检测。大规模的视觉语言预训练模型如CLIP [ 42 ]充当了视觉和文本模态之间的桥梁。最近在视频异常检测领域的一些工作[  41、17、57、61]利用文本信息作为提示来增强模型的异常表示。基于此，[ 56 ]首先提出了开放词汇VAD任务。此外，文献[ 65  ]使用字幕模型从视频帧中提取字幕，并为LLMs设计提示以提供异常评分。然而，这些方法主要关注生成异常分数，缺乏在大规模特定领域指令数据集上的微调，导致其性能高度依赖于基LLM。</p>
<h2 id="3-VAD-Instruct50k构建">3. VAD-Instruct50k构建</h2>
<p><img src="/img/Holmes-VAD.assets/image-20241031153101330.png" alt="image-20241031153101330"></p>
<blockquote>
<p>**图二：**针对本文提出的VAD -  Instruct50k的数据引擎。我们从现有的数据集中收集了大量的异常/正常视频，然后进行了一系列的标注增强，包括时间单帧标注，事件片段生成和事件片段描述。然后，我们通过使用增强的注释来提示功能强大的LLM来构造指令数据。在整个管道中，人工作业和大型基础模型相互协调，以确保施工的效率和质量。</p>
</blockquote>
<h3 id="3-1-数据集生成过程：">3.1 数据集生成过程：</h3>
<ul>
<li><strong>数据收集</strong>：VAD-Instruct50k 的数据主要来自两个现有的弱监督视频异常检测数据集：UCF-Crime 和 XD-Violence。UCF-Crime包含来自监控摄像头的异常视频，涵盖了13类现实世界异常事件。XD-Violence则包含6种异常类型，如车祸、爆炸和斗殴等。经过筛选，最终收集了5547段未经修剪的长视频，其中包括异常视频和正常视频。</li>
</ul>
<h3 id="3-2-注释增强">3.2 注释增强</h3>
<ul>
<li>
<p><strong>单帧标注：<strong>由于这些视频只有粗粒度的、视频级别的异常标签，作者通过</strong>单帧标注</strong>来提升注释的准确性。具体方法是在每个异常事件的视频中仅标注一帧代表异常的关键帧。这种方法在保持标注成本较低的同时，能够有效提高异常检测模型的训练效果。通过这个过程，我们平均每个视频收集了2.35个单帧标注。</p>
</li>
<li>
<p><strong>事件片段生成</strong>：基于单帧标注，作者设计了一个<strong>伪标签生成方法</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">\phi_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，并使用它来训练VAD网络。通过该方法，能够生成与注释帧周围相应的异常事件片段。这一过程包含以下步骤：</p>
<ul>
<li><strong>异常事件提议生成</strong>：对于每个有单帧标注的异常视频（记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>g</mi><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>N</mi><mi>g</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">G = \{g_i\}_{i=1}^{N_g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2973em;vertical-align:-0.2769em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0205em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2421em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>g</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">g_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>个注释帧），作者使用训练好的VAD网络估计每帧的异常得分，并围绕注释帧生成多个异常事件提议（proposals）。每个提议由起始时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>和结束时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>组成。</li>
<li><strong>正常事件提议生成</strong>：为了让模型学习正常行为，作者还从正常视频中随机提取了一些正常事件提议（即正常视频中的一些时间段）。这一过程生成的提议用于训练模型区分正常和异常行为。</li>
</ul>
<p>最后，所有的已修剪事件片段都被标注为异常类别（例如“Explosion”）或“Normal”。整个数据表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ξ</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>e</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>N</mi><mi>e</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">\xi = \{s_i, e_i, y_i\}_{i=1}^{N_e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2001em;vertical-align:-0.2769em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9232em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为视频事件片段的标签，异常片段为对应的异常类别，正常片段则标注为“Normal”。</p>
</li>
<li>
<p><strong>事件片段描述</strong>：为了从这些事件片段中提取更丰富的语义信息，作者使用了一个<strong>基于视频的多模态大语言模型（MLLM）</strong>，为每个事件片段生成详细的文字描述。为了确保描述的准确性，作者也使用了<strong>SurveillanceVision</strong>数据集中的一些手工标注的事件描述，这些描述主要来自UCF-Crime中的片段。</p>
<ul>
<li><strong>数据表示</strong>：最终，每个事件片段都被标注了异常标签，并通过多模态大模型生成了详细的文字描述。数据集包含的事件片段表示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ξ</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>s</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>e</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>N</mi><mi>e</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">\xi = \{s_i, e_i, y_i, c_i\}_{i=1}^{N_e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2001em;vertical-align:-0.2769em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9232em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为事件片段的文字描述。</li>
</ul>
</li>
</ul>
<p><img src="/img/Holmes-VAD.assets/image-20241031153117763.png" alt="image-20241031153117763"></p>
<blockquote>
<p>**图三：**Holmes - VAD将未修剪的视频和用户提示作为输入，将异常评分和对检测到的异常的解释输出。时序采样器将帧的类别标记作为输入并估计异常分数，密集的视觉标记在进入projector之前根据其异常分数进行重采样。</p>
</blockquote>
<h3 id="3-3-指令微调数据集的构建">3.3 指令微调数据集的构建</h3>
<p><strong>注释增强</strong>过程有效地填补了原始视频级注释信息的不足，但仍然缺乏关于异常事件的解释性说明，例如“异常是什么”和“为什么是异常”。为了弥补这一缺陷，作者利用了具有丰富开放领域知识的大语言模型（LLM），进一步生成指令微调数据集。</p>
<p>在技术上，对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ξ</mi></mrow><annotation encoding="application/x-tex">\xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span></span></span></span> 中的每个事件片段，我们结合可参考的异常上下文，即异常标签 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和细节描述 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，设计了一个任务提示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">P_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。然后将组合提示输入到LLM <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>中，对视频片段中的异常进行判断并给出解释。生成的响应与相应的异常感知查询 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">P_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 配对，产生一个指令项：</p>
<p><img src="/img/Holmes-VAD.assets/image-20241031153137650.png" alt="image-20241031153137650"></p>
<p>我们使用Llama3 - Instruct - 70B 作为这里的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，因为它的开源可用性和与GPT4相当的性能。我们设计了多个Pd来保证指令数据的多样性，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">P_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的一个典型提示是：’ &lt;video&gt;\ n视频片段中是否有意外或不寻常的事件? '。</p>
<h2 id="4-Holmes-VAD">4. Holmes-VAD</h2>
<p>利用提出的VAD - Intruct50k数据集进行训练，我们开发了一个可解释视频异常检测的定制解决方案，即Holmes -  VAD，它有3个关键组件：<strong>视频编码器( Video Encoder )</strong>、<strong>时间采样器( Temporal Sampler )<strong>和带有</strong>可调LoRA 模块的多模态LLM</strong>。</p>
<h3 id="4-1-模型架构">4.1 模型架构</h3>
<h4 id="4-1-1-视频编码器（visual-encoder）">4.1.1 视频编码器（visual encoder）</h4>
<p><strong>视频编码器</strong>的作用是对输入视频进行编码，将其转化为适合后续处理的特征表示。Holmes-VAD使用了<strong>LanguageBind</strong>模型中的冻结视频编码器，继承了来自<strong>CLIP</strong>（ViT-L/14架构）的视频编码能力。不同于原始的ViT结构，这个编码器在时间维度上增加了自注意力层，用于建模帧间的时间关系。</p>
<p>具体来说，给定一个视频帧序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>N</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow></msup></mrow><annotation encoding="application/x-tex">V \in \mathbb{R}^{N \times H \times W \times C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span>，每帧的输出特征表示为：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>F</mi><mi>i</mi><mi>d</mi></msubsup><mo>=</mo><mo stretchy="false">{</mo><msubsup><mi>f</mi><mi>i</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>f</mi><mi>i</mi><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>f</mi><mi>i</mi><mn>2</mn></msubsup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msubsup><mi>f</mi><mi>i</mi><mrow><mi>N</mi><mi>p</mi></mrow></msubsup><mo stretchy="false">}</mo><mo>=</mo><msub><mi>ϕ</mi><mi>v</mi></msub><mo stretchy="false">(</mo><msub><mi>V</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>N</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F_i^d=\{f_i^{cls},f_i^1,f_i^2,…,f_i^{Np}\}=ϕ_v(V_i),i∈\{1,2,…,N\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1078em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4413em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2361em;vertical-align:-0.2769em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4413em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4413em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4413em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9592em;"><span style="top:-2.4231em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1809em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">Np</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">}</span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mi>i</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">f^{cls}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1078em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4413em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span></span></span></span> 表示第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>帧的类别标记特征，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mi>i</mi><mi>j</mi></msubsup></mrow><annotation encoding="application/x-tex">f^j_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2194em;vertical-align:-0.2769em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9426em;"><span style="top:-2.4231em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1809em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span></span></span></span> 表示该帧的每个patch的视觉嵌入，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">N_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 是每帧的patch数。</p>
<h4 id="4-1-2-时间采样器（Temporal-Sampler）">4.1.2 时间采样器（Temporal Sampler）</h4>
<ul>
<li>
<p><strong>时间采样器</strong>用于估计每帧的异常分数，并选择高响应的帧作为多模态 LLM 的输入。这一模块的设计重点是减少计算开销，同时确保高效检测长视频中的异常事件。</p>
</li>
<li>
<p>在处理长视频时，逐帧处理会导致大量冗余计算。因此，Holmes-VAD首先将密集的帧输入视频编码器，然后使用预先训练好的 VAD 网络计算每帧的类别标记特征（class token），并输出异常分数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">s_1, s_2, \dots, s_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：</p>
</li>
</ul>
<p><strong>cls token 的目的</strong>是作为全局图像特征的汇聚点。ViT模型通过一系列自注意力（self-attention）机制来交换补丁之间的信息，而cls令牌通过这些交互，逐步积累了整个图像的全局语义信息。最终，cls_token被用作图像的全局表示，用于分类任务。具体的做法是在ViT的最后一层，从cls令牌中提取全局特征进行分类或其他下游任务。</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>s</mi><mi>N</mi></msub><mo stretchy="false">}</mo><mo>=</mo><msub><mi>ϕ</mi><mi>s</mi></msub><mo stretchy="false">(</mo><mo stretchy="false">{</mo><msubsup><mi>f</mi><mn>1</mn><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>f</mi><mn>2</mn><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>f</mi><mi>N</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msubsup><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\{s_1,s_2,...,s_N\}=\phi_s(\{f_1^{cls},f_2^{cls},...,f_N^{cls}\})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1244em;vertical-align:-0.2753em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">({</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4519em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4519em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4247em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2753em;"><span></span></span></span></span></span></span><span class="mclose">})</span></span></span></span></p>
<p>其中，$\phi_s $是训练好的 VAD 网络。</p>
<p>然后，我们根据异常分数对视频令牌进行采样。具体来说，只有来自异常分数sk高于设定阈值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">θ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>的帧的令牌<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">f_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>才会被输入到后续的网络中：</p>
<h4 id="4-1-3-Projector-和-MLLM">4.1.3 Projector 和 MLLM</h4>
<p>为了使LLM能够理解视觉编码器输出的特征，在它们之间设计了一个由两层MLP组成的投影仪<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\phi_{proj}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，之后，特征维度与LLM的输入维度对齐。我们利用 Vicuna [7] 作为我们的LLM,经过微调可以生成与视频内容相关的文本响应。</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>L</mi><mi>L</mi><mi>M</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>ϕ</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>F</mi><mi>s</mi></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>T</mi></msub><mo stretchy="false">(</mo><msub><mi>T</mi><mrow><mn>0</mn><mo>:</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_{i+1}=LLM([ϕ_{proj}(F^s),ϕ_T(T_{0:i})])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">([</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)])</span></span></span></span></p>
<p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mn>0</mn><mo>:</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{0:i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mrel mtight">:</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示输入的文本标记(text token)，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">T_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 表示预测的下一个标记(token)。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mtext>proj</mtext></msub></mrow><annotation encoding="application/x-tex">\phi_{\text{proj}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3175em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">proj</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ϕ</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">\phi_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 分别表示projector和文本编码器。</p>
<h3 id="4-2-模型训练">4.2 模型训练</h3>
<h4 id="1-时间采样器的训练（Training-of-the-Temporal-Sampler）">1. 时间采样器的训练（Training of the Temporal Sampler）</h4>
<ul>
<li>
<p>该阶段中，使用单帧标注进行训练，采用了一种伪标签监督策略。伪标签由单帧标注初始化，并在训练过程中在线更新。这一过程通过使用生成的伪标签来监督预测的异常分数，从而减少时间采样器对正常行为的偏差。</p>
<p>时间采样器的训练目标是通过二元交叉熵损失函数（BCE）来优化异常得分，公式为：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mrow><mi>a</mi><mi>b</mi><mi>n</mi></mrow></msub><mo>=</mo><mi>B</mi><mi>C</mi><mi>E</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mover accent="true"><mi>S</mi><mo>~</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{abn}=BCE(S,\tilde{S})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">abn</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1702em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">BCE</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">~</span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span> 是预测的异常得分，$\tilde{S} $是生成的伪帧级标签。</p>
</li>
</ul>
<h4 id="2-指令微调（Instruction-Tuning）">2. 指令微调（Instruction Tuning）</h4>
<ul>
<li>在指令微调阶段，模型接收的是修剪过的事件片段输入，因此不需要使用时间采样器。此时，投影器和多模态 LLM 被训练，以生成解释性文本。</li>
<li>投影器使用两层 MLP 进行优化，并通过 LoRA 方法微调多模态 LLM。该阶段的训练目标是最大化生成正确响应的可能性，即基于输入特征生成连贯且准确的响应。</li>
</ul>
<h2 id="5-Experiments">5. Experiments</h2>
<h3 id="5-1-实验设置">5.1 实验设置</h3>
<ul>
<li><strong>视频编码器</strong>：Holmes-VAD 使用 <strong>LanguageBind</strong> 模型中的 ViT（Vision Transformer）作为视频编码器。ViT 继承了 CLIP 模型的 ViT-L/14 结构，并在时间维度上增加了自注意力层，用于捕捉视频帧之间的时间关系。</li>
<li><strong>多模态大语言模型（Multi-modal LLM）</strong>：模型初始化使用了 <strong>Video-LLaVA</strong> 作为多模态语言模型的基础，并在 VAD-Instruct50k 数据集上进行指令微调。微调过程中使用了 LoRA 技术来降低训练复杂度。</li>
<li><strong>时间采样器（Temporal Sampler）</strong>：时间采样器的基础结构使用了 <strong>UR-DMU</strong>。在训练时间采样器时，随机采样每 16 帧中的一帧，使用 Adam 优化器，学习率设置为 1e-4。</li>
<li><strong>训练细节</strong>：指令微调过程中，使用的批量大小为 128，训练 1 个 epoch。采用 AdamW 优化器，学习率逐渐递减。投影器的学习率设为 2e-5，LoRA 的参数设定为：秩 r=64、学习率为 2e-4。</li>
<li><strong>推理过程中异常阈值</strong>：在推理阶段，异常得分的阈值 θ 设为 0.8。</li>
</ul>
<h3 id="5-2-主要结果">5.2 主要结果</h3>
<p><img src="/img/Holmes-VAD.assets/image-20241014172032201.png" alt="image-20241014172032201"></p>
<h3 id="5-3-分析结果">5.3 分析结果</h3>
<p><img src="/img/Holmes-VAD.assets/image-20241014171959401.png" alt="image-20241014171959401"></p>
<p><img src="/img/Holmes-VAD.assets/image-20241014172206457.png" alt="image-20241014172206457"></p>
<h2 id="6-Conclusion">6. Conclusion</h2>
<p>在本文中，我们介绍了一种称为 Holmes-VAD  的视频异常检测系统，以解决现有异常检测方法中的偏差和缺乏可解释性。通过引入更高效的标记范式并构建大规模多模态视频异常检测数据集  VAD-Instruct50k，我们验证了 Holmes-VAD 的通用性和可解释性。通过大量的实验，我们将 Holmes-VAD  定位为现实世界应用的有价值的工具。</p>
<p>**限制和未来的工作。**尽管在构建 VAD-Instruct50k  数据集期间人类努力过滤噪声指令数据，但依赖现成的视频字幕模型来生成视频描述可能并不总是能够捕获细微差别和特定于上下文的信息。这是我们在标注成本和效率之间做出的权衡，我们认为数据质量与数据数量同等重要，未来我们计划在可接受的人力成本范围内进一步提升数据质量和数量。此外，虽然我们通过Temporal Sampler控制输入到Multi-modal LLM的视频长度并准确分析修剪后的视频片段中的异常内容，但Multimodal  LLM仍然缺乏理解长期视频异常的有效解决方案而不损害其图像级感知能力。我们把这些留给我们未来的探索。</p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>大模型</tag>
        <tag>视频异常检测</tag>
        <tag>CVPR</tag>
        <tag>计算机视觉</tag>
        <tag>多模态</tag>
      </tags>
  </entry>
  <entry>
    <title>LAVAD</title>
    <url>/2024/10/31/LAVAD/</url>
    <content><![CDATA[<h1>LAVAD</h1>
<p><strong>Harnessing Large Language Models for Training-free Video Anomaly Detection</strong></p>
<h2 id="Abstract">Abstract</h2>
<h3 id="背景">背景</h3>
<p>视频异常检测（VAD）旨在从时间上定位视频中的异常事件。现有的工作主要依靠训练深度模型来学习正态分布，无论是视频级监督、一类监督还是在无监督环境中。</p>
<p>基于训练的方法往往是特定于领域的，因此实际部署的成本很高，因为任何领域的变化都将涉及数据收集和模型训练。</p>
<h3 id="本文工作">本文工作</h3>
<p>在本文中，我们从根本上背离了之前的努力，并提出了基于语言的 VAD (LAVAD)，这是一种以新颖的、免训练范式解决 VAD 的方法，利用了预训练的<strong>大语言模型 (LLM) <strong>和</strong>现有视觉语言模型的功能（VLM）</strong>。</p>
<ul>
<li>
<p>我们利用基于 VLM 的字幕模型为任何测试视频的每一帧生成文本描述。通过文本场景描述，我们设计了一种提示机制来解锁 LLM 在<strong>时间聚合和异常分数估计</strong>方面的能力，将 LLM 转变为有效的视频异常检测器。</p>
</li>
<li>
<p>我们进一步利用模态对齐的 VLM，并提出基于<strong>跨模态相似性</strong>的有效技术，用于清理噪声字幕并细化基于 LLM 的异常分数。</p>
</li>
</ul>
<h3 id="实验结果">实验结果</h3>
<p>LAVAD在UCF-Crime和XD-Violence数据集上的性能超过了现有的无监督和单类方法，表明其在没有训练和数据收集的情况下也能实现有效的异常检测。</p>
<h2 id="1-Introduction">1. Introduction</h2>
<h3 id="1-1-VAD定义与挑战">1.1 VAD定义与挑战</h3>
<ul>
<li>
<p>**定义：**视频异常检测 (VAD) 旨在从时间上定位给定视频中明显偏离正常模式的事件，即异常事件。</p>
</li>
<li>
<p><strong>挑战：<strong>VAD 具有挑战性，因为异常通常是</strong>未定义的并且依赖于上下文</strong>，并且它们很少在现实世界中发生。</p>
</li>
</ul>
<h3 id="1-2-现有方法与挑战">1.2 现有方法与挑战</h3>
<p>VAD被视为<strong>分布外检测（out-of -distribution detection）</strong></p>
<p>并使用不同监督级别的训练数据来学习<strong>正态分布(normal distribution)</strong></p>
<ul>
<li>
<p><strong>完全监督方法（Fully-supervised methods）</strong>：需要在帧级别提供正常和异常视频的标签。这种方法能够提供精确的检测结果，但由于视频标注成本高昂，应用受限。</p>
</li>
<li>
<p><strong>弱监督方法（Weakly-supervised methods）</strong>：仅在视频级别提供标签，即标注视频为整体的正常或异常。虽然标注成本较低，但弱监督方法往往不能精确定位帧级异常。</p>
</li>
<li>
<p><strong>单类学习方法（One-class methods）</strong>：这些方法只使用正常视频进行训练，在训练过程中假设所有的训练视频都是正常的。然而，这需要在数据收集时严格确保所有视频确实是正常的，这样才能保证模型的有效性。</p>
</li>
<li>
<p><strong>无监督方法（Unsupervised methods）</strong>：这些方法不需要任何标签，假设训练数据中包含正常和异常视频，并使用生成模型来捕捉正常视频的模式。然而，这种假设在实际应用中较为脆弱，往往需要人工干预来保证模型的效果。</p>
</li>
</ul>
<p>虽然更多的监督会带来更好的结果，但手动注释的成本却令人望而却步。另一方面，无监督方法假设异常视频构成训练数据的某一部分，这在没有人工干预的实践中是一个脆弱的假设。</p>
<h3 id="1-3-现有方法的普遍问题">1.3. 现有方法的普遍问题</h3>
<p>所有现有的VAD方法都有一个共同的限制，即它们<strong>依赖于训练过程</strong>，这带来了一些关键问题：</p>
<ul>
<li><strong>泛化性差</strong>：由于VAD模型通常在特定的数据集上进行训练，它们在不同的场景中（例如白天和夜晚的变化）表现可能不尽如人意。模型在新的场景中常常需要重新进行训练，这增加了部署的成本。</li>
<li><strong>数据收集困难</strong>：特别是在涉及隐私问题的领域（例如视频监控）中，获取足够的数据进行训练非常困难。此外，标注视频中的异常事件也需要大量的人力资源和时间。</li>
</ul>
<p><strong>开发一种免训练的VAD方法</strong></p>
<h3 id="1-4-作者提出的方法：LAVAD">1.4. 作者提出的方法：LAVAD</h3>
<p>为了应对上述挑战，作者提出了一种新的视频异常检测方法，称为<strong>LAVAD（Language-based Video Anomaly Detection）</strong>，这是一个<strong>基于语言的大型预训练模型</strong>的新方法。LAVAD完全不依赖训练过程，而是通过结合现有的**视觉语言模型（VLMs）<strong>和</strong>大语言模型（LLMs）**来检测视频中的异常事件。该方法联合利用预训练的 VLM 和 LLM 进行 VAD。</p>
<p>具体来说，LAVAD的工作流程如下：</p>
<ol>
<li><strong>生成文本描述</strong>：使用VLM模型为每一帧视频生成文本描述（caption）。这一步骤可以利用现成的VLM来捕捉帧中的视觉信息并将其转化为自然语言描述。</li>
<li><strong>异常检测</strong>：基于生成的文本描述，LAVAD设计了一种<strong>提示机制</strong>，通过提示（prompts）大语言模型（LLMs）来对这些描述进行时间聚合，并为每一帧生成异常分数（anomaly score）。大语言模型通过聚合帧级信息，推测出视频中帧的异常性，从而实现异常检测。</li>
<li><strong>优化与增强</strong>：作者进一步利用模态对齐的VLMs提出了一种基于跨模态相似性的技术来<strong>清理噪声描述</strong>，并通过语义相似的时间窗口聚合异常分数，进一步提升检测性能。</li>
</ol>
<h3 id="1-5-作者贡献">1.5 作者贡献</h3>
<ul>
<li>
<p>首次研究了<strong>无训练的视频异常检测</strong>问题，强调其在数据收集困难或无法进行标注的实际场景中的重要性。</p>
</li>
<li>
<p>提出了<strong>LAVAD</strong>，这是第一个基于大语言模型的<strong>训练无关</strong>的VAD方法，利用场景描述来检测异常。</p>
</li>
<li>
<p>引入了<strong>基于跨模态相似性</strong>的技术，解决了噪声描述问题，并优化了基于LLM的异常打分，显著提升了检测性能。</p>
</li>
</ul>
<p>实验表明，LAVAD在不使用任务特定的监督和不进行训练的情况下，取得了与无监督和单类VAD方法相媲美的结果，为未来的VAD研究开辟了新的视角。</p>
<p><img src="/img/LAVAD.assets/image-20241012092427308.png" alt="image-20241012092427308"></p>
<blockquote>
<p><strong>图1</strong>我们介绍了第一个用于视频异常检测( VAD )的免训练方法，该方法不同于现有的基于ALL训练的、不同监督程度的方法。我们的方案LAVAD利用模态对齐的视觉-语言模型( VLMs )来查询和增强大型语言模型( LLMs )产生的异常分数。</p>
</blockquote>
<h2 id="2-相关工作（Related-Work）">2. 相关工作（Related Work）</h2>
<h3 id="2-1-VAD-Video-Anomaly-Detection">2.1 VAD(Video Anomaly Detection)</h3>
<p>作者首先对视频异常检测领域的现有工作进行了分类，总结了不同类型的VAD方法。现有的VAD方法根据监督程度可以分为四类<strong>监督，弱监督，单类分类和无监督</strong>。：</p>
<ul>
<li><strong>完全监督方法（Fully-supervised VAD）</strong>：完全监督方法使用帧级标签来区分正常和异常帧。例如，某些方法使用3D卷积神经网络（3D CNNs）提取视频的时空特征，并通过帧级标注来训练模型。然而，完全监督的方式在实际应用中较少，因为标注每一帧的正常与异常需要巨大的人工成本。</li>
<li><strong>弱监督方法（Weakly-supervised VAD）</strong>：弱监督方法仅使用视频级别的标签。视频被标记为“异常”是基于视频中的某些帧可能包含异常事件。这类方法通常使用多实例学习（MIL）损失函数来优化模型，结合3D卷积神经网络提取特征。这类方法的优点在于标注成本相对较低，虽然不能精确定位帧级别的异常，但它们更适合实际操作中的大规模数据。</li>
<li><strong>单类分类方法（One-class VAD）</strong>：单类分类方法只使用正常视频进行训练，训练目标是学习正常行为的模式，以便检测在测试时与之不同的异常行为。这类方法的一个缺点是，虽然训练数据是正常的，但需要进行手动验证以确保收集到的数据都是正常的。例如考虑生成模型或伪监督方法，其中伪异常实例由正常训练数据合成</li>
<li><strong>无监督方法（Unsupervised VAD）</strong>：无监督方法不依赖于预定义的标签，通常假设大多数视频是正常的，而异常仅在少数视频中出现。这类方法通常使用生成模型来捕捉正常视频的模式。例如，生成对抗网络（GANs）和自编码器经常用于重建正常数据，并根据重建误差检测异常。<u>(特别地，生成式协作学习( GCL ) 采用交替训练：一个自动编码器重构输入特征，来自重构误差的伪标注引导一个判别器。)</u>然而，这类方法存在一定风险，因为如果异常视频的数量过多，模型可能无法学到有效的正常模式。</li>
</ul>
<p>使用扩散模型从含噪特征中重建原始数据分布，根据去噪和原始样本之间的重建误差计算异常分数。其他方法从OneClassSVM和孤立森林生成的一组伪标注中训练一个回归器网络。</p>
<h3 id="2-2-LLMs-for-VAD">2.2 LLMs for VAD</h3>
<p>最近，大语言模型（LLMs）在各种视觉异常检测领域中得到了探索。作者回顾了几项与LLMs相关的工作：</p>
<ul>
<li><strong>视觉语言模型在VAD中的应用</strong>：已有研究尝试结合视觉语言模型（VLMs）和LLMs进行视觉异常检测。例如，Kim等人提出了一种无监督方法，利用VLMs检测图像中的异常，而ChatGPT等LLMs则用于生成正常和异常元素的文本描述。尽管该方法结合了VLMs和LLMs，但仍需要通过人工干预来优化LLM的输出，并需要进一步的训练以适应特定应用场景。</li>
<li><strong>LLMs在特定应用中的使用</strong>：作者还指出，其他研究在机器人或工业应用中利用LLMs进行空间异常检测。然而，这些方法主要集中在静态图像的异常检测，且通常需要进一步的任务特定训练来提高模型性能。</li>
</ul>
<p>与现有工作不同，LAVAD方法不仅结合了LLMs和VLMs，还首次在视频异常检测中提出了<strong>完全训练无关的框架</strong>，不需要额外的数据收集或模型训练。</p>
<h2 id="3-Training-Free-VAD-无训练VAD">3. Training-Free VAD(无训练VAD)</h2>
<p>在这一部分中，我们首先提出了了VAD问题和提出的免训练设置( Sec.3.1 )。然后，我们分析了LLMs在视频帧中评分异常的能力(第3.2节)。最后，我们描述了LAVAD，我们提出的VAD方法(见3.3节)。</p>
<h3 id="3-1-问题定义（Problem-Formulation）">3.1 问题定义（Problem Formulation）</h3>
<p>在这一部分，作者首先正式定义了视频异常检测任务。给定一个包含 M帧的测试视频$$V=[I_1,I_2,…,I_M]$$，传统的VAD方法旨在学习一个模型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>，该模型能够为每一帧 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分配一个分数，判断其是否为异常，异常分数介于0到1之间（0表示正常，1表示异常）。这些传统方法通常需要使用一个训练集 D，其中每个视频 V都带有标签 y，标签的形式取决于监督的级别（帧级别标签、视频级别标签或无标签等）。</p>
<p>然而，LAVAD与传统方法不同，它不依赖训练数据。在无训练设置下，LAVAD旨在通过预训练的模型在推理过程中直接估计每一帧的异常分数，而<strong>无需进行任何训练或微调</strong>。这种无训练的设置使得LAVAD可以在无需数据标注和模型训练的情况下应用于实际场景。</p>
<h3 id="3-2-LLMs4VAD-good">3.2 LLMs4VAD good?</h3>
<p>在这一部分中，作者探讨了大语言模型（LLMs）在视频异常检测中的潜力。具体而言，LAVAD利用一个<strong>预训练的视觉语言模型（VLM）</strong>，如<strong>BLIP-2</strong>，来生成每一帧的视频描述（caption）。这些文本描述为大语言模型提供了输入，以便生成每帧的异常分数。</p>
<p><strong>核心步骤</strong>：</p>
<ol>
<li><strong>生成文本描述</strong>：首先，使用VLM（如BLIP-2）为每帧 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>生成一个文本描述 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。这些描述为后续的大语言模型操作提供了基础信息。</li>
<li><strong>异常分数估计</strong>：接下来，作者将异常分数估计任务视为一个分类任务，利用大语言模型（LLM）对生成的描述进行处理。通过给LLM一个特定的提示（prompt），询问其如何对该场景进行异常评分（0为正常，1为异常），从而获取异常分数。</li>
</ol>
<p>异常分数的计算公式为：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi mathvariant="normal">Φ</mi><mrow><mi>L</mi><mi>L</mi><mi>M</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>P</mi><mi>C</mi></msub><mo>∘</mo><msub><mi>P</mi><mi>F</mi></msub><mo>∘</mo><msub><mi mathvariant="normal">Φ</mi><mi>C</mi></msub><mo stretchy="false">(</mo><msub><mi>I</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_i=Φ_{LLM}(P_C∘P_F∘Φ_C(I_i))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">LL</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><mrow><mi>L</mi><mi>L</mi><mi>M</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Φ_{LLM}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">LL</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是大语言模型，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">Φ_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是用于生成描述的视觉语言模型，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>C</mi></msub></mrow><annotation encoding="application/x-tex">P_C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是提供上下文的提示，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>F</mi></msub></mrow><annotation encoding="application/x-tex">P_F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是要求LLM输出分数的格式提示，∘ 表示文本的连接操作。</p>
<p><strong>实验分析</strong>： 为了验证LLMs的能力，作者在UCF-Crime数据集上测试了不同版本的BLIP-2模型，并使用了不同的LLMs（如Llama和Mistral）来生成异常分数。实验结果表明，尽管LLMs能够显著优于随机评分，但其性能仍不及无监督方法。作者认为，LLMs的表现受到了两个方面的限制：</p>
<ul>
<li><strong>帧级描述的噪声</strong>：生成的描述可能存在错误或不完整，导致异常分数不准确如图三。</li>
<li><strong>缺乏场景的全局信息</strong>：单帧的描述无法捕捉视频的动态信息（缺乏上下文信息），而视频中的场景动态对异常检测至关重要。</li>
</ul>
<p>因此，作者接下来提出了如何通过LAVAD的方法解决这些问题。该方法利用LLMs和模态对齐的VLMs进行异常评分。</p>
<p><img src="/img/LAVAD.assets/image-20241012095920776.png" alt="image-20241012095920776"></p>
<blockquote>
<p>**图二：**通过在UCF - Crime测试集上查询LLMs对来自不同字幕模型的视频帧的文本描述，绘制VAD性能的条形图( AUC ROC )。不同的线条对应着标题模型BLIP - 2的不同变体，而不同的颜色则表示两个不同的LLMs 。作为参考，我们还绘制了性能最好的无监督方法在红色虚线中的表现，以及随机分类器在灰色虚线中的表现。</p>
</blockquote>
<p><img src="/img/LAVAD.assets/image-20241012100733926.png" alt="image-20241012100733926"></p>
<blockquote>
<p>**图三：**Llama 对UCF - Crime中的视频Shooting033预测了随时间变化的异常分数。我们突出一些样本帧及其相关的BLIP -  2标题，以证明标题可以是语义噪声或不正确的(红色包围盒用于异常预测,蓝色包围盒用于正常预测)。<strong>突出了实际异常</strong>。特别地，由于LLM给出的低异常分数，由蓝色边界框围成的帧的描述未能准确地表示视觉内容，从而导致错误的分类。</p>
</blockquote>
<h3 id="3-3-LAVAD：LAnguage-based-VAD">3.3 LAVAD：LAnguage-based VAD</h3>
<p><img src="/img/LAVAD.assets/image-20241012101749156.png" alt="image-20241012101749156"></p>
<blockquote>
<p>**图四：**本文提出的用于解决免训练VAD的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>A</mi><mi>V</mi><mi>A</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">LAVAD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>的体系结构。对于每个测试视频<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>，我们首先使用字幕模型为每一帧<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>∈<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>生成一个字幕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，形成字幕序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>。我们的图像-文本字幕清洗组件基于跨模态相似度来处理噪声和错误的原始字幕。我们将原始字幕替换为字幕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>C</mi><mi>i</mi></msub><mo>~</mo></mover><mo>∈</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\tilde{C_i}∈C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0702em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，其文本embedding  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ξ</mi><mi>T</mi></msub><mo stretchy="false">(</mo><mover accent="true"><msub><mi>C</mi><mi>i</mi></msub><mo>~</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\xi_T ( \tilde{C _i })</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1702em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.046em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>与图像embedding   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ξ</mi><mi>I</mi></msub><mo stretchy="false">(</mo><msub><mi>I</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\xi_I ( I_i )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.046em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>最对齐，从而得到干净的字幕序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>C</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9202em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span style="top:-3.6023em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">~</span></span></span></span></span></span></span></span></span></span>。<strong>为了考虑场景上下文和动态性</strong>，基于LLM的Anomaly  Scoring组件通过促使LLM产生一个时间摘要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，进一步聚合以每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为中心的时间窗口内的已清洗字幕，形成一个摘要序列S，然后查询LLM，根据每个帧的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为其提供一个异常分数，得到所有帧的初始异常分数a。最后，我们的Video - Text Score Refinement组件通过聚合以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">I_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为中心的视频片段<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ξ</mi><mi>V</mi></msub><mo stretchy="false">(</mo><msub><mi>V</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\xi_V ( V_i  )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.046em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>与摘要的文本嵌入大部分对齐的帧的初始异常分数来细化每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从而得到最终的异常分数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span></span></span></span>，用于检测视频中的异常(异常帧被突出显示)。</p>
</blockquote>
<p>LAVAD将VAD函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>分解为五个元素(见图4)。与预研究一样，前两个是在语言空间T中，将图像映射为文本描述的字幕模块<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">Φ C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Φ</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">Φ C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Φ</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>→</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">I→T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>，以及由语言查询生成文本的LLM <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mi>L</mi><mi>L</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">Φ LLM</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Φ</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> ，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Φ</mi><mi>L</mi><mi>L</mi><mi>M</mi><mtext>：</mtext><mi>T</mi><mo>→</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">Φ LLM：T→T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Φ</span><span class="mord mathnormal">LL</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord cjk_fallback">：</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>。其他元素包括三个编码器，将输入表示映射到共享的潜在空间Z。具体来说，我们有图像编码器 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ξ</mi><mi>I</mi></msub><mtext>：</mtext><mi>I</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">\xi_I：I→Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.046em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">：</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span>，文本编码器 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ξ</mi><mi>T</mi></msub><mtext>：</mtext><mi>T</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">\xi_T：T→Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.046em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">：</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span> 和视频编码器 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ξ</mi><mi>V</mi></msub><mtext>：</mtext><mi>V</mi><mo>→</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">\xi_V：V→Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.046em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">：</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span>。注意的是，所有的五个元素都只涉及现成的冷冻模型。</p>
<h4 id="3-3-1-图像-文本描述清理（Image-Text-Caption-Cleaning）">3.3.1. <strong>图像-文本描述清理</strong>（Image-Text Caption Cleaning）</h4>
<p><img src="/img/LAVAD.assets/image-20241012113717145.png" alt="image-20241012113717145"></p>
<h4 id="3-3-2-LLM-based-异常打分">3.3.2 LLM-based 异常打分</h4>
<p><img src="/img/LAVAD.assets/image-20241012151705243.png" alt="image-20241012151705243"></p>
<h4 id="3-3-3-视频——文本分数优化（Video-Text-Score-Refinement）">3.3.3 视频——文本分数优化（Video-Text Score Refinement）</h4>
<p><img src="/img/LAVAD.assets/image-20241012163508741.png" alt="image-20241012163508741"></p>
<p>旨在通过利用视频片段与文本描述的跨模态相似性，进一步优化每一帧的异常分数。这个步骤的目的是解决初始异常分数可能因帧级信息不足或不准确而存在的问题。通过这种优化，LAVAD 能够充分利用视频的全局信息，提高视频异常检测的鲁棒性和准确性。</p>
<h2 id="4-Experiments-实验">4. Experiments(实验)</h2>
<p>我们在两个数据集上验证了我们的免训练算法LAVAD，我们进行了广泛的消融研究，以证明我们的主要设计选择是关于拟议的组件、快速并与在不同监督水平下训练的最先进的VAD方法以及免训练的基线进行了比较、设计和评分细化。</p>
<h4 id="4-0-1-数据集（Datasets）">4.0.1  <strong>数据集</strong>（Datasets）</h4>
<p>LAVAD 在两个大规模数据集上进行了实验验证：</p>
<ul>
<li><strong>UCF-Crime</strong>：这是一个包含 1900 段未剪辑监控视频的大型数据集，涵盖 13 种异常事件，如打架、偷窃等。该数据集被分为训练集（800 段正常视频和 810 段异常视频）和测试集（150 段正常视频和 140 段异常视频）。</li>
<li><strong>XD-Violence</strong>：这是另一个大规模的数据集，包含 4754 段带有音频信号的视频，捕捉了 6 类暴力相关的异常事件。视频来自电影和 YouTube，具有更多元的内容。</li>
</ul>
<h4 id="4-0-2-性能指标（Performance-Metrics）">4.0.2  <strong>性能指标</strong>（Performance Metrics）</h4>
<p>为了评估视频异常检测性能，实验采用了两个主要指标：</p>
<ul>
<li><strong>AUC ROC（曲线下面积）</strong>：帧级别的接收者操作特性曲线下的面积。该指标与异常检测的阈值选择无关，是衡量检测任务的标准方法。</li>
<li><strong>AP（平均精度）</strong>：这是针对 XD-Violence 数据集的指标，表示帧级别的精度-召回曲线下的面积，通常用于评价检测任务的精准度和召回率。</li>
</ul>
<blockquote>
<p>AUC 是 ROC 曲线下面积的大小，用于定量衡量模型的分类能力。AUC 的取值范围在 0 到 1 之间，代表了模型性能的好坏：</p>
</blockquote>
<ul>
<li><strong>AUC = 1</strong>：模型表现完美，能够在所有情况下正确区分正类和负类。</li>
<li><strong>AUC = 0.5</strong>：模型与随机猜测的效果相同，无法有效区分正类和负类。</li>
<li><strong>AUC &lt; 0.5</strong>：模型表现糟糕，反而在大多数情况下错误分类。</li>
</ul>
<blockquote>
<p>在视频异常检测任务中，AUC ROC 通常用于衡量模型在帧级别上的检测性能。具体来说，模型需要将每一帧视频分类为“正常”或“异常”，并计算出对应的异常分数。通过 ROC 曲线和 AUC，可以评估模型在不同阈值下对异常帧和正常帧的区分能力。AUC 值越高，表示模型在帧级别上检测异常的效果越好。</p>
</blockquote>
<h4 id="4-0-3-实现细节（Implementation-Details）">4.0.3  <strong>实现细节</strong>（Implementation Details）</h4>
<ul>
<li><strong>采样策略</strong>：为提高计算效率，LAVAD 对每个视频进行了每 16 帧采样一次，以减少冗余信息。</li>
<li><strong>模型选择</strong>：LAVAD 采用了 BLIP-2 作为生成文本描述的视觉语言模型（VLM），并使用了 Llama-2-13b-chat 作为大语言模型（LLM）。此外，还采用了 ImageBind 提供的多模态编码器用于视频-文本分数优化。时间窗口设置为 10 秒，并选取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">K=10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> 帧进行相似性计算。</li>
</ul>
<h3 id="4-1-与SOTA比较">4.1 与SOTA比较</h3>
<ul>
<li><strong>LLAVA-1.5 方法的比较</strong>：作为另一种训练无关的基线方法，LLAVA-1.5 直接使用大语言模型（LLM）生成每帧的异常分数，其性能比零样本的 VLM 方法要好，但仍然不如 LAVAD。这说明 LAVAD 中所采用的时间总结和异常分数优化过程，在提升视频异常检测性能方面起到了重要作用。</li>
</ul>
<h4 id="4-1-1-定性分析（Qualitative-Analysis）">4.1.1  <strong>定性分析（Qualitative Analysis）</strong></h4>
<p>除了定量比较之外，作者还展示了 LAVAD 方法的部分定性结果。实验中展示了 LAVAD 在 UCF-Crime 和 XD-Violence 数据集上对一些视频的检测结果：</p>
<ul>
<li><strong>异常视频</strong>：在异常视频中，LAVAD 能够准确捕捉到视频中的异常时刻，并通过生成的时间总结来解释这些异常行为。例如，在检测到打斗或暴力事件时，模型能够识别到特定的时间段，并且与视觉和文本信息一致。</li>
<li><strong>正常视频</strong>：在正常视频中，LAVAD 生成的异常分数保持较低，证明了模型能够有效地区分正常行为与异常行为。</li>
</ul>
<p><img src="/img/LAVAD.assets/image-20241013103611847.png" alt="image-20241013103611847"></p>
<p>**图五：**我们展示了LAVAD在四个测试视频上获得的定性结果，包括UCF - Crime的两个视频(上排)和XD -  Violence的两个视频(下排)。对于每个视频，我们在我们的方法计算的帧上绘制异常分数。我们展示了一些关键帧和它们最匹配的时间摘要(正常帧预测的蓝色包围盒和异常帧预测的红色包围盒)，说明了预测的异常分数、视觉内容和描述之间的相关性。突出了地实异常。</p>
<h3 id="4-2-Ablation-study-消融研究">4.2 Ablation study(消融研究)</h3>
<h4 id="4-2-1-各组件的有效性实验">4.2.1 各组件的有效性实验</h4>
<p>这部分通过去除或修改LAVAD中的某些组件，来评估它们对视频异常检测性能的贡献。主要包括以下几个变体：</p>
<ul>
<li><strong>去掉图像-文本描述清理组件</strong>：仅使用原始的文本描述进行检测，结果显示异常检测性能降低了3.8%。</li>
<li><strong>不使用时间总结</strong>：只依赖清理后的文本描述，不考虑时间动态信息，性能下降7.58%，这说明时间总结对LLM异常评分有显著提升作用。</li>
<li><strong>不进行视频-文本评分优化</strong>：仅基于时间总结的初始异常得分，结果性能下降7.49%，表明视频-文本评分优化对于提高检测性能也起到了重要作用。</li>
</ul>
<p>总体来看，这部分的实验验证了LAVAD中每个组件（图像-文本描述清理、基于LLM的异常评分、视频-文本得分优化）的重要性和必要性。</p>
<h4 id="4-2-2-任务相关的上下文提示词实验：">4.2.2 <strong>任务相关的上下文提示词实验</strong>：</h4>
<p>这一部分探讨了在为LLM设计提示词（prompt）时，加入不同任务相关的先验信息（如异常检测背景、模拟执法场景）是否会对检测性能产生影响。实验结果表明：</p>
<ul>
<li>添加“犯罪活动”等先验信息对异常检测性能影响较小。</li>
<li>加入“执法机关”的模拟角色提示（例如“如果你是执法机关，你会如何评价这一场景？”）可以提升检测性能，增加了0.96%的AUC。</li>
<li>但当同时加入“犯罪活动”和“执法机关”两类提示词时，性能并未进一步提升，表明过于严格的提示可能限制了LLM检测更广泛异常的能力。</li>
</ul>
<h4 id="4-2-3-K值">4.2.3 K值</h4>
<p>这里的K值指的是在视频-文本得分优化步骤中，用于聚合异常得分的语义最相似帧的数量。实验结果显示，随着K值增加，VAD性能也提升，并且在K值达到9时性能趋于稳定。这表明考虑语义相似的帧对于生成更可靠的异常得分非常重要。</p>
<p><img src="/img/LAVAD.assets/image-20241013110658775.png" alt="image-20241013110658775"></p>
<h2 id="5-总结（Conclusion）">5. 总结（Conclusion）</h2>
<h3 id="5-1-方法总结">5.1 方法总结</h3>
<p>LAVAD 是一种创新的无训练视频异常检测方法，它通过语言驱动的方式来估计异常得分，充分利用了预训练的大语言模型（LLMs）和视觉-语言模型（VLMs）。具体而言，LAVAD 采用了以下三大组件：</p>
<ul>
<li><strong>图像-文本相似性清理</strong>：用于清理由视频帧生成的噪声文本描述，从而提高文本描述的质量。</li>
<li><strong>基于LLM的异常评分</strong>：通过引入时间窗口，利用LLM生成的场景动态总结来估计异常得分。</li>
<li><strong>视频-文本评分优化</strong>：通过聚合语义上相似的帧来优化异常得分。</li>
</ul>
<h3 id="5-2-实验结果：">5.2 <strong>实验结果</strong>：</h3>
<p>LAVAD在两个视频异常检测数据集（UCF-Crime 和 XD-Violence）上的实验结果表明，在无监督和单类异常检测任务中，该方法的性能优于现有的训练基方法，并且无需进行模型训练或数据收集。实验还验证了该方法在真实世界应用中的潜力。</p>
<h3 id="5-3-未来工作展望：">5.3 <strong>未来工作展望</strong>：</h3>
<p>LAVAD 的成功为未来视频异常检测的研究提供了新的方向。由于该方法能够在没有训练和数据收集的情况下实现高效的异常检测，未来可以探索如何进一步扩展和改进这类无训练检测方法，以应对更多实际场景的挑战。</p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>大模型</tag>
        <tag>视频异常检测</tag>
        <tag>CVPR</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE高级（二）</title>
    <url>/2024/11/19/JAVA%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1>JAVA高级（二）</h1>
<h2 id="1-正则表达式">1. 正则表达式</h2>
<ul>
<li>
<p>作用：</p>
<ul>
<li>用来校验数据格式是否合法</li>
<li>在一段文本中查找满足需求的内容</li>
</ul>
</li>
<li>
<p>书写规则：<img src="/img/JAVA%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/image-20241119143551049.png" alt="image-20241119143551049"></p>
</li>
</ul>
<h2 id="2-集合框架（一）">2. 集合框架（一）</h2>
<ul>
<li>集合体系结构
<ul>
<li>Collection单列集合</li>
<li>Map双列集合（键值对）</li>
</ul>
</li>
</ul>
<p><img src="/img/JAVA%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/image-20241121105320555.png" alt="image-20241121105320555"></p>
<ul>
<li>Collection的遍历方式：
<ul>
<li>迭代器Iterator</li>
<li>增强for循环:可以用来遍历数组或者集合（本质是迭代器的简化写法）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器iterator</span></span><br><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">c.add(<span class="string">&quot;alex&quot;</span>);</span><br><span class="line">Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">ele</span> <span class="operator">=</span> it.next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增强for循环</span></span><br><span class="line"><span class="keyword">for</span>(String ele : c)&#123;</span><br><span class="line">   	System</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forEach方法结合lambda表达式</span></span><br><span class="line">c.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;()&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span>&#123;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">c.forEach((String s)-&gt;&#123;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">c.forEach(s-&gt;&#123;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">    &#125;);</span><br><span class="line">c.forEach(System.out::println);   </span><br></pre></td></tr></table></figure>
<ul>
<li>List集合：有序、可重复、有索引
<ul>
<li>ArrayList集合特点
<ul>
<li>基于数组实现</li>
<li>查询效率低</li>
<li>删除效率低</li>
<li>添加效率极低</li>
</ul>
</li>
<li>LinkedList（双向链表）
<ul>
<li>查询慢（需要从开始查）</li>
<li>增删相对快</li>
<li>双向列表对首位元素进行增删改查的速度极快。</li>
<li>应用场景：可以用来设计栈</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ArrayList</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;121&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;232&quot;</span>);</span><br><span class="line">list.add(<span class="number">1</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line">list.get(<span class="number">1</span>);</span><br><span class="line">list.set(<span class="number">1</span>,<span class="string">&quot;zz&quot;</span>);</span><br><span class="line"><span class="comment">//LinkedList</span></span><br><span class="line">LinkedList&lt;String&gt; queue = newe LinkedList&lt;&gt;();</span><br><span class="line">queue.addLast(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">queue,addLast(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">queue.removeFirst();</span><br></pre></td></tr></table></figure>
<ul>
<li>Set集合：无序、不重复、无索引
<ul>
<li>HashSet：无序、不重复、无索引</li>
<li>LinkedHashSet：有序、不重复、无索引
<ul>
<li>原理：每个元素额外多了一个双链表机制记录前后元素的位置</li>
</ul>
</li>
<li>TreeSet：排序、不重复、无索引、可排序（基于红黑树实现）</li>
</ul>
</li>
</ul>
<p><img src="/img/JAVA%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/image-20241121141703741.png" alt="image-20241121141703741"></p>
<ul>
<li>注意事项：集合的并发修改异常
<ul>
<li>iterator会带来并发修改异常</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//并发修改异常</span></span><br><span class="line">Iterator&lt;String&gt; it =list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(name.contains(<span class="string">&quot;李&quot;</span>))&#123;</span><br><span class="line">        list.remove(name);<span class="comment">//并发修改异常</span></span><br><span class="line">        it.remove()<span class="comment">//删除迭代器当前遍历的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-集合框架（二）">3. 集合框架（二）</h2>
<ul>
<li>可变参数：
<ul>
<li>一种特殊的形参，可以不传数据给他；可以传一个或者多个数据给他，也可以传一个数组；可以更灵活的接收数据。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可变参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>...nums)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//Collections(工具类)</span></span><br><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(names,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;zhw&quot;</span>,<span class="string">&quot;www&quot;</span>);</span><br><span class="line">Collections.shuffle(names);<span class="comment">//打乱元素的顺序</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Collections.sort(list);<span class="comment">//对list排序</span></span><br><span class="line"><span class="comment">//如果是针对如Student类，需要在类里implements Comparable,重写compareTo方法</span></span><br><span class="line">Collections.sort(Students,( o1, o2) -&gt; Double.compare(o1.getHeight(),o2.getHeight()));</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Map系列集合</p>
<ul>
<li>
<p>特点：</p>
<ul>
<li>
<p>Map集合被称为双列集合，一次要存一堆数据作为一个元素</p>
</li>
<li>
<p>键值对集合，一一对应</p>
</li>
<li>
<p>Map中所有键是不允许重复的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;手机&quot;</span>,<span class="number">100</span>);</span><br><span class="line">map.put(<span class="string">&quot;手表&quot;</span>,<span class="number">200</span>);</span><br><span class="line">Map&lt;Integer, String&gt; map1 = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Map的常用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.size();</span><br><span class="line">map.clear();<span class="comment">//清空</span></span><br><span class="line">map.isEmpty();<span class="comment">//是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> map.get(<span class="string">&quot;手表&quot;</span>);<span class="comment">//根据键得到值</span></span><br><span class="line">map.remove(<span class="string">&quot;手表&quot;</span>);<span class="comment">//删除键值对（返回值）</span></span><br><span class="line">map.containsKey(<span class="string">&quot;手机&quot;</span>);<span class="comment">//判断</span></span><br><span class="line">map.containsValue(<span class="number">2</span>);<span class="comment">//判断是否含有某个值</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();<span class="comment">//获取Map集合的全部键</span></span><br><span class="line">Collection&lt;Integer&gt; values = map.values();</span><br><span class="line">map1.putAll(map2);<span class="comment">//所有值加入到map1中</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Map的遍历</p>
<ul>
<li>键找值</li>
<li>键值对</li>
<li>Lambda</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//键找值</span></span><br><span class="line">Map&lt;String, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;zz&quot;</span>,<span class="number">188.5</span>);</span><br><span class="line">map.put(<span class="string">&quot;xx&quot;</span>,<span class="number">177.6</span>);</span><br><span class="line">map.put(<span class="string">&quot;cc&quot;</span>,<span class="number">177.9</span>);</span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">System.out.println(keys);</span><br><span class="line"><span class="keyword">for</span>(String key : keys)&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    System.out.println(key+<span class="string">&quot; &quot;</span>+value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//键值对</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, Double&gt; &gt;entries = map.entrySet();<span class="comment">//获取所有的键值对的集合</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,Double&gt; entry : entries)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span>  <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    System.out.println(key+<span class="string">&quot; &quot;</span>+value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Lambda</span></span><br><span class="line">map.forEach((k,v) -&gt;&#123;</span><br><span class="line">    System.out.println(key+<span class="string">&quot; &quot;</span>+value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Student, String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1,Student o2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(o2.getHeight(),o1.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><img src="/img/JAVA%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/image-20241127105904352.png" alt="image-20241127105904352"></p>
<ul>
<li>Stream 流
<ul>
<li>定义：
<ul>
<li>可以用来操作集合或者数组的数据</li>
<li>结合了Lambda的语法风格编程，代码更简洁，可读性更好</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(names,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;zd&quot;</span>,<span class="string">&quot;sd&quot;</span>);</span><br><span class="line">List&lt;String&gt; list2 = names.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;z&quot;</span>)).filter(a-&gt;a.length() == <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">System.out.println(list2);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常用方法、、Set集合</span></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(set,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;zd&quot;</span>,<span class="string">&quot;sd&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream1 = set.stream();</span><br><span class="line">stream1.filter(s -&gt; s.contains(<span class="string">&quot;z&quot;</span>)).forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//Map集合的Stream流</span></span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;zz&quot;</span>,<span class="number">188.5</span>);</span><br><span class="line">map.put(<span class="string">&quot;xx&quot;</span>,<span class="number">177.6</span>);</span><br><span class="line">map.put(<span class="string">&quot;cc&quot;</span>,<span class="number">177.9</span>);</span><br><span class="line"><span class="comment">//分别取出键、值流</span></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">Stream&lt;String&gt; ks = keys.stream();</span><br><span class="line">Collection&lt;Double&gt; values = map.values();</span><br><span class="line">Stream&lt;Double&gt; vs = values.stream();</span><br><span class="line"><span class="comment">//键值对成对取出</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();</span><br><span class="line">Stream&lt;Map.Entry&lt;String, Double&gt;&gt; kvs = entries.stream();</span><br><span class="line">kvs.filter(e -&gt;e.getKey().contains(<span class="string">&quot;z&quot;</span>)).forEach(e -&gt; System.out.println(e.getKey()));</span><br><span class="line"><span class="comment">//Arrays类取出流</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;zza&quot;</span>,<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;as&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; s1 = Arrays.stream(names2);</span><br><span class="line">Stream&lt;String&gt; s2 = Stream.of(names2);</span><br></pre></td></tr></table></figure>
<ul>
<li>Stream流常见的中间方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Double&gt; scores = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(scores,<span class="number">88.5</span>,<span class="number">75.2</span>,<span class="number">12.54</span>,<span class="number">12.3</span>,<span class="number">98.5</span>,<span class="number">2.0</span>);</span><br><span class="line">scores.stream().filter(s -&gt; s &gt;=<span class="number">60</span>).sorted().forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//	Student 类</span></span><br><span class="line"><span class="comment">//年龄在23到30之间，年龄降序输出</span></span><br><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">students.stream().filter(s -&gt; s.getAge() &gt;=<span class="number">23</span> &amp;&amp; s.getAge() &lt;= <span class="number">30</span>).sort((o1,o2) -&gt; o2.getAge() - o1.getAge()).forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//取出升高最高的三个学生，输出（用到limit,表示限制多少个）</span></span><br><span class="line">students.stream().sort((o1,o2) -&gt; Double.compare(o2.getHeight(),o1.getHeight()).limit(<span class="number">3</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//取身高倒数的两个学生，并输出（用到skip，表示跳过多少个）</span></span><br><span class="line">students.stream().sorted((o1,o2)-&gt;Double.compare(o2.getHeight(),o1.getHeight())).skip(students.size()-<span class="number">2</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//找到超过168的学生的名字，并去除重复，在输出(用到map映射，加工数据（一种数据变成另一个数据）)(distinct（去重复）)</span></span><br><span class="line">students.stream().filter(s -&gt; s.getHeight()&gt;<span class="number">168</span>).map(s -&gt;s.getName()).distinct().forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//若希望内容一致为重复，需要重写equals()和hashcode()方法</span></span><br><span class="line"><span class="comment">//可以使用concat方法合并两个流</span></span><br><span class="line">Stream&lt;String&gt; st1 = Stream.of(<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; st2 = Stream.of(<span class="string">&quot;zz1&quot;</span>,<span class="string">&quot;xx1&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; st3 = Stream.concat(st1,st2);</span><br><span class="line">allSt.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<ul>
<li>Stream流的终结方法
<ul>
<li>终结方法指的是调用完成后，不会返回新的Stream了，没法再继续使用流了</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.forEach()方法</span></span><br><span class="line"><span class="comment">//2.count()方法,long类型</span></span><br><span class="line"><span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> students.stream().filter(s -&gt; s.getHeight() &gt; <span class="number">168</span>).count();</span><br><span class="line">System.out.println(size);</span><br><span class="line"><span class="comment">//找出身高最高的学生对象</span></span><br><span class="line"><span class="comment">//3.max(),min()方法</span></span><br><span class="line">students.stream().max((o1,o2) -&gt; Double.compare(o1.getHeight(),o2.getHeight()));</span><br><span class="line"><span class="comment">//4.收集stream流；转回到集合/数组中</span></span><br><span class="line"><span class="comment">//流只能收集一次</span></span><br><span class="line"><span class="comment">//collect()收集到List集合中,toList()/toSet()转为List/Set</span></span><br><span class="line">List&lt;Student&gt; students1 = students.stream().filter(s -&gt; s.getHeight &gt; <span class="number">170.0</span>).collect(Collectors.toList());</span><br><span class="line">Set&lt;Student&gt; students2 = students.stream().filter(s -&gt; s.getHeight &gt; <span class="number">170.0</span>).collect(Collectors.toSet());</span><br><span class="line"><span class="comment">//找到身高超过170的学生对象，并把学生的名字和身高存入到一个Map集合中,toMap()</span></span><br><span class="line">Map&lt;String, Double&gt; map = students.stream().filter(a -&gt; a.getHeight()&gt;<span class="number">170</span>).distinct().collect(Collectors.toMap(a -&gt;a.getName,a-&gt;a.getHeight()));</span><br><span class="line">Object[] arr = students.stream().filter(a -&gt; a.getHeight()&gt;<span class="number">170</span>).toArray();</span><br><span class="line">Student[] arr = students.stream().filter(a -&gt; a.getHeight()&gt;<span class="number">170</span>).toArray(len -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>[len]);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode每日一题</title>
    <url>/2024/11/02/LeetCode/</url>
    <content><![CDATA[<h1>力扣每日一题</h1>
<h3 id="动态规划">动态规划</h3>
<p><strong>链接</strong>：</p>
<p><a href="https://leetcode.cn/problems/minimum-cost-to-cut-a-stick/description/">1547. 切棍子的最小成本 - 力扣（LeetCode）</a></p>
<p><a href="https://leetcode.cn/problems/shopping-offers/submissions/579662475/">638. 大礼包 - 力扣（LeetCode）</a></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础</title>
    <url>/2024/11/04/JAVASE%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1>JAVASE基础</h1>
<p><a href="https://www.bilibili.com/video/BV1Cv411372m">https://www.bilibili.com/video/BV1Cv411372m</a></p>
<h2 id="0-IntelliJ-IDEA实用快捷键">0.IntelliJ IDEA实用快捷键</h2>
<ul>
<li>CTRL + / :为代码注释</li>
<li>CTRL+SHIFT+/:整段注释</li>
<li>CTRL+D：复制到下一行</li>
<li>CTRL+ALT+T：环绕代码（for\while等）</li>
<li>CTRL+ALT+SPACE：自动提示代码</li>
<li>右键-生成：快速为类生成set、get、构造函数</li>
</ul>
<h2 id="1-Java入门">1. Java入门</h2>
<h3 id="1-1-java基础知识">1.1 java基础知识</h3>
<blockquote>
<p><strong>javac.exe</strong>：编译工具</p>
<p><strong>java.exe</strong>：执行工具</p>
</blockquote>
<p>过程：1.编写代码 2.编译代码（javac) 3.运行代码(java)</p>
<p>文件名称必须与代码的类名称一致。、</p>
<blockquote>
<p>javac HelloWorld.java(生成HelloWorld.class)</p>
<p>java HelloWorld</p>
</blockquote>
<h3 id="1-2-JDK的组成">1.2 JDK的组成</h3>
<ul>
<li>JVM：Java虚拟机，运行Java程序的地方。</li>
<li>核心类库：Java类。</li>
<li>JRE：Java的运行环境。（JVM+核心类库）</li>
<li>开发工具：Java、Javac</li>
</ul>
<h3 id="1-3-IDEA">1.3 IDEA</h3>
<p><strong>project的构成：</strong></p>
<ul>
<li>project（项目、工程）</li>
<li>module（模块）</li>
<li>package（包）</li>
<li>class（类）</li>
</ul>
<h2 id="2-Java语法">2. Java语法</h2>
<h3 id="2-1-char类型ASCII码（leetcode用）">2.1 char类型ASCII码（leetcode用）</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">10</span>);<span class="comment">//107</span></span><br><span class="line">System.out.println(<span class="string">&#x27;A&#x27;</span>+<span class="number">10</span>);<span class="comment">//75</span></span><br><span class="line">System.out.println(<span class="string">&#x27;C&#x27;</span>-<span class="string">&#x27;A&#x27;</span>);<span class="comment">//2</span></span><br><span class="line">System.out.println((<span class="type">char</span>)(<span class="string">&#x27;c&#x27;</span>-<span class="number">1</span>));<span class="comment">//b</span></span><br></pre></td></tr></table></figure>
<p>Java支持二进制、八进制、十六进制的数据，分别需要以0b、0、0X或者0x开头。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">0B01100001</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">0141</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="number">0XFA</span>;</span><br><span class="line">System.out.println(a1+<span class="string">&quot;  &quot;</span>+a2+<span class="string">&quot;   &quot;</span>+a3);<span class="comment">//97  97  250</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-变量类型转换">2.2 变量类型转换</h3>
<ul>
<li>
<p>自动类型转换</p>
<ul>
<li>byte→short→int→long→float→double</li>
<li>char→int</li>
</ul>
</li>
<li>
<p>表达式的自动类型转换</p>
<ul>
<li>表达式的最终结果由表达式的最高类型决定。</li>
<li>表达式在，byte、short、char是转换为int参与运算。</li>
</ul>
</li>
<li>
<p>强制类型转换</p>
<ul>
<li>byte b = (byte)a   (快捷键：ALT+ENTER)</li>
<li>可能会造成精度丢失。</li>
<li>小数转为整数是直接阶段小数保留整数。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(i/j);<span class="comment">//2</span></span><br><span class="line">System.out.println(<span class="number">1.0</span>*i/j);<span class="comment">//2.5</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-运算符">2.3 运算符</h3>
<ul>
<li>自增/自减</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> ++a;<span class="comment">//11</span></span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line">rs =a++;<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> ++m - --m + m++ - ++n + n-- +<span class="number">3</span>; <span class="comment">//6-5+5-4+4+3=9</span></span><br></pre></td></tr></table></figure>
<ul>
<li>扩展的赋值运算符+=、-=自带强制类型转换。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">5</span>;</span><br><span class="line">System.out.println(a = b);<span class="comment">//5,先赋值给a</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>逻辑与：&amp;；逻辑或：|；逻辑非：！；逻辑异或：^；</p>
</li>
<li>
<p>&amp;&amp;短路与；||短路或；<strong>一边已经确定，另一边就不执行</strong>。</p>
</li>
<li>
<p>三元运算符：条件表达式？值1：值2</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">61</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> score &gt;= <span class="number">60</span> ? <span class="string">&quot;及格&quot;</span> : <span class="string">&quot;不及格&quot;</span></span><br><span class="line">System.out.println(rs);<span class="comment">//及格</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运算符优先级 &amp;&amp; &gt; ||(加个括号就好了)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>);<span class="comment">//(true || false)=true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用Scanner接收键盘输入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//等待输入整数，直到输入回车键</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();<span class="comment">//等待输入字符串</span></span><br></pre></td></tr></table></figure>
<h2 id="3-流程控制">3. 流程控制</h2>
<ul>
<li>
<p>switch表达式要求只能是byte、short、int、char、string。</p>
</li>
<li>
<p>do-while先执行后判断，while先判断后循环。</p>
</li>
<li>
<p>Random的使用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">// 1.导包</span></span><br><span class="line"><span class="comment">// 2.创建一个Random对象</span></span><br><span class="line"><span class="comment">// 3.调用Random提供的功能：nextInt得到随机数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> r.nextInt(bound:<span class="number">10</span>);<span class="comment">//生成0-9</span></span><br></pre></td></tr></table></figure>
<h2 id="4-数组">4. 数组</h2>
<ul>
<li>数组初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] ages = &#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;<span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//&#123;0,0,0&#125;；动态初始化</span></span><br><span class="line"><span class="type">boolean</span>[] arr = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">3</span>];<span class="comment">//&#123;false,false,false&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数组存储</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 =arr1;<span class="comment">//两个数组指向同一片内存区域</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">System.out.println(arr1[<span class="number">1</span>]);<span class="comment">//99</span></span><br><span class="line">arr2 = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr2);<span class="comment">//null</span></span><br><span class="line">System.out.println(arr2.length);<span class="comment">//空指针异常</span></span><br></pre></td></tr></table></figure>
<ul>
<li>debug工具使用
<ul>
<li>打断点</li>
<li>使用Debug方式启动程序</li>
<li>控制代码一行一行执行</li>
</ul>
</li>
</ul>
<h2 id="5-方法（函数）">5. 方法（函数）</h2>
<ul>
<li>
<p>方法在计算机的执行：栈。</p>
</li>
<li>
<p>参数传递机制：值传递，传输的是实参的值的副本。</p>
<ul>
<li>实参：在方法内部定义的变量。</li>
<li>形参：以方法为例，是方法定义时的变量。</li>
</ul>
</li>
<li>
<p>基本类型的参数传输的是参数的数据值，<strong>引用类型的参数传输存储的地址值。</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] arrs)</span>&#123;<span class="type">int</span>[] arrs = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;</span><br><span class="line">    &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line">	change(arrs);</span><br><span class="line">	System.out.println(<span class="string">&quot;arrs[1]&quot;</span>);<span class="comment">//222</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] arrs)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;arrs[1]&quot;</span>);<span class="comment">//20</span></span><br><span class="line">    arrs[<span class="number">1</span>] = <span class="number">222</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;arrs[1]&quot;</span>);<span class="comment">//222</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>MMGaitFormer</title>
    <url>/2024/10/31/MMGaitFormer/</url>
    <content><![CDATA[<h1>Multi-Modal Gait Recognition via Effective Spatial-Temporal Feature Fusion</h1>
<p><strong>CVPR 2023</strong></p>
<h2 id="Abstract">Abstract</h2>
<p>步态识别是一种通过人的步态特征进行身份识别的技术。然而，现有的步态识别方法主要基于两种数据：轮廓和骨架。轮廓数据易受到服装遮挡的影响，骨架数据则缺乏身体外形信息。为了解决这些问题，论文提出了一种融合这两种数据的步态识别方法，从而获得更健壮和全面的步态表示。</p>
<p>论文提出了一个基于<strong>Transformer</strong>的步态识别框架 <strong>MMGaitFormer</strong>。该框架通过以下两个关键模块来实现多模态的融合：</p>
<ul>
<li><strong>空间融合模块（Spatial Fusion Module, SFM）</strong>：该模块通过注意力机制，将步态的细粒度空间特征（如骨架关节和轮廓身体部分）进行融合。</li>
<li><strong>时间融合模块（Temporal Fusion Module, TFM）</strong>：该模块通过一种称为循环位置嵌入（Cycle Position Embedding, CPE）的技术，结合步态序列的时间信息进行建模和融合。</li>
</ul>
<h2 id="1-Introduction">1.Introduction</h2>
<p><img src="/img/MMGaitFormer.assets/image-20241004150309776.png" alt="image-20241004150309776"></p>
<p>如图1（a）所示，虽然剪影保留了大部分身体形状信息，但当身体区域重叠时会出现自遮挡问题。此外，当衣服条件发生变化时，如图1（b）所示，衣服遮蔽会导致外部身体形状发生显着变化。</p>
<blockquote>
<p>骨架只保留内部身体结构信息，有效解决了衣服遮挡和自我遮挡问题，但完全忽略了辨别性的身体形状信息导致性能不佳。</p>
<p>因此，我们可以观察到剪影保留了外部身体形状信息并省略了一些身体结构线索，而骨骼保留了内部身体结构信息。这两种数据模式是互补的，它们的组合有望成为更全面的步态表示</p>
</blockquote>
<p>我们提出了一种名为 MMGaitFormer 的基于 Transformer 的步态识别框架，它有效地融合和聚合了骨骼和轮廓的时空信息。</p>
<h3 id="1-1-模型整体架构">1.1 <strong>模型整体架构</strong></h3>
<p>MMGaitFormer 主要由以下三个阶段组成：</p>
<ul>
<li><strong>预处理阶段</strong>：从原始视频中提取轮廓序列和骨架序列。轮廓是通过图像分割方法从RGB视频中获得，骨架是通过姿态估计模型提取出来的。</li>
<li><strong>编码阶段</strong>：轮廓和骨架序列分别输入独立的编码模块，提取它们各自的空间和时间特征。</li>
<li><strong>融合阶段</strong>：引入了<strong>空间融合模块（SFM）和时间融合模块（TFM）</strong>，分别用于空间和时间层次的特征融合，最终将这些特征融合为一个统一的步态表示。</li>
</ul>
<h3 id="1-2-关键模块介绍">1.2 <strong>关键模块介绍</strong></h3>
<h4 id="1-2-1-轮廓编码模块（Silhouette-Encoding-Module-SiEM）">1.2.1 <strong>轮廓编码模块（Silhouette Encoding Module, SiEM）</strong></h4>
<ul>
<li><strong>目的</strong>：用于从轮廓图像中提取空间和时间特征。</li>
<li><strong>结构</strong>：SiEM 主要使用 3D 卷积神经网络（CNN）以及其他特征提取层，如最大池化层和微运动捕捉模块（Micro-motion Capture Module, MCM），以捕捉轮廓的局部和全局步态特征。</li>
</ul>
<h4 id="1-2-2-骨架编码模块（Skeleton-Encoding-Module-SkEM）">1.2.2  <strong>骨架编码模块（Skeleton Encoding Module, SkEM）</strong></h4>
<ul>
<li><strong>目的</strong>：用于从骨架数据中提取空间和时间特征。</li>
<li><strong>结构</strong>：SkEM 使用图卷积网络（Graph Convolutional Network, GCN）来从骨架的关节点序列中提取空间和时间信息。由于骨架和轮廓数据的性质不同，SkEM 和 SiEM 是分开的编码模块。</li>
</ul>
<h4 id="1-2-3-空间融合模块（Spatial-Fusion-Module-SFM）">1.2.3 <strong>空间融合模块（Spatial Fusion Module, SFM）</strong></h4>
<ul>
<li><strong>目的</strong>：融合骨架和轮廓的空间信息，利用它们的互补性来获得更加完整的步态表示。</li>
<li><strong>机制</strong>：SFM 通过一种<strong>共注意力机制（Co-Attention Mechanism）<strong>实现，将骨架关节和轮廓部位的细粒度特征进行匹配和融合。这一过程被称为</strong>细粒度身体部位融合（Fine-grained Body Parts Fusion, FBPF）</strong>，基于人体的先验知识，将头部、躯干和腿部分别进行特征融合。
<ul>
<li><strong>共注意力机制</strong>：它使用双重交叉注意力模块（Cross-attention blocks）来实现骨架和轮廓之间的交互，并通过预定义的注意力掩码，确保相应的身体部位（如头、躯干、腿）之间的特征能够准确匹配。</li>
</ul>
</li>
</ul>
<h4 id="1-2-4-时间融合模块（Temporal-Fusion-Module-TFM）">1.2.4  <strong>时间融合模块（Temporal Fusion Module, TFM）</strong></h4>
<ul>
<li><strong>目的</strong>：对步态序列的时间信息进行建模和融合。</li>
<li><strong>机制</strong>：TFM 提出了<strong>循环位置嵌入（Cycle Position Embedding, CPE）</strong>，用于捕捉步态序列中的周期性特征。CPE 能够模拟步态的周期过程，并且适应任意长度的步态序列，有效提高时间建模的准确性。
<ul>
<li><strong>时间共注意力机制</strong>：与 SFM 类似，TFM 也使用共注意力机制来融合骨架和轮廓的时间信息，确保步态序列中的时间特征能够有效地进行融合和增强。</li>
</ul>
</li>
</ul>
<h2 id="2-Related-Work">2. Related Work</h2>
<h3 id="2-1-基于外观的方法（Appearance-based-Methods）">2.1  <strong>基于外观的方法（Appearance-based Methods）</strong></h3>
<p>基于外观的步态识别方法通常依赖于从视频中提取的<strong>轮廓图像</strong>，即通过分割得到的二值化的轮廓图来描述人体的外部形态。这类方法的核心是利用这些轮廓图像来消除外部因素（如背景噪声）的干扰，专注于人体形状和运动模式。这类方法在文献中得到了广泛应用，主要包括以下几种代表性方法：</p>
<ul>
<li><strong>GaitSet</strong>：将步态看作一组轮廓图像序列，通过帧级特征提取模块获取空间特征，再通过时空聚合模块获取步态表示。</li>
<li><strong>GaitPart</strong>：引入了微运动捕捉模块（Micro-motion Capture Module, MCM），以捕获局部的微运动特征。</li>
<li><strong>GaitGL</strong>：基于3D卷积神经网络（3D CNN），同时捕获局部和全局的时空特征。</li>
</ul>
<p>尽管这些基于轮廓的方法在步态识别中表现优异，但它们在面对服装遮挡和自遮挡问题时表现出局限性，识别性能会受到一定影响。</p>
<h3 id="2-2-基于模型的方法（Model-based-Methods）">2.2  <strong>基于模型的方法（Model-based Methods）</strong></h3>
<p>这类方法通过建模人体的物理结构，从而以一种更加可解释的方式来表达步态信息。模型化的方法通常会提取骨架信息，使用姿态估计模型从视频中获取人体关节的位置信息，并基于这些关节节点的动态特征进行步态识别。</p>
<ul>
<li><strong>PoseGait</strong>：利用人体的先验知识设计姿态特征，使用卷积神经网络（CNN）提取步态特征。</li>
<li><strong>GaitGraph</strong>：通过图卷积网络（Graph Convolutional Network, GCN）来处理骨架关节的时空关系，生成步态特征。</li>
</ul>
<p>骨架信息的优势在于它对外观变化（如服装变化）有更好的鲁棒性，但由于缺少人体的外部形态信息，这类方法的区分性有时不如基于外观的方法。</p>
<h3 id="2-3-多模态步态识别方法（Multi-modal-Gait-Recognition-Methods）">2.3  <strong>多模态步态识别方法（Multi-modal Gait Recognition Methods）</strong></h3>
<p>多模态步态识别尝试通过融合多种数据源（如深度图、视频、骨架数据等）来提升识别性能。早期研究探索了深度图像、惯性传感器数据和视频数据的融合，但基于同源视频数据的多模态方法尚未被充分开发。现有方法大多采用简单的特征拼接或全局特征融合，这种融合方式无法充分利用细粒度的空间和时间信息。</p>
<ul>
<li><strong>BiFusion</strong>：一种融合骨架和轮廓信息的步态识别方法，通过简单地拼接全局特征进行融合，但无法捕捉细粒度的时空特征。</li>
<li><strong>TransGait</strong>：使用多模态学习的方法，利用 Set Transformer 实现骨架和轮廓的融合，但融合过程仍然较为简单，缺乏对细节的深度挖掘。</li>
</ul>
<p>这些多模态融合方法尽管在识别准确率上有一定提升，但由于缺乏细粒度的空间和时间融合手段，仍未能充分发挥多模态数据的潜力。</p>
<h2 id="3-Methods">3.  Methods</h2>
<h3 id="3-1-Pipeline">3.1 Pipeline</h3>
<p><img src="/img/MMGaitFormer.assets/image-20241004192949785.png" alt="image-20241004192949785"></p>
<blockquote>
<p><strong>预处理阶段</strong>：分别通过分割方法和姿态估计方法从原始RGB视频中提取剪影序列和骨架序列。</p>
<p><strong>编码阶段</strong>：我们将输入轮廓和骨架分别输入轮廓编码模块（SiEM）和骨架编码模块（SkEM）以学习时空特征图。</p>
<p><strong>融合阶段</strong>：提出了空间融合模块（SFM）和时间融合模块（TFM），分别用于有效的细粒度空间和细对齐时间特征融合。</p>
<p>ATT表示交叉注意力块，两个ATT形成共同注意力结构，用于特征融合。 TFM 中的嵌入建模 (EM) 用于时间建模。单独的全连接层（SFC）用于编码和融合阶段的特征映射。</p>
</blockquote>
<h3 id="3-2-SiEM和SkEM">3.2 SiEM和SkEM</h3>
<h4 id="3-2-1-motivation">3.2.1 motivation</h4>
<p>两种模态表示的数据结构差异太大，很难在数据层面上直接融合。因此，我们设计独立的编码模块来捕获每个模态的独特判别信息，并增强后续融合的时空特征表示。为了加速模型收敛，我们专门进行了轮廓损失Lsil和骨架损失Lske来分别监督每个模态特征的学习。</p>
<h4 id="3-2-2-实现方式">3.2.2 实现方式</h4>
<p><strong>SiEM</strong> 网络由 3D CNN 块 、最大池化层和微动作捕捉模块 (MCM)  组成。</p>
<p><strong>SkEM</strong>我们引入图卷积网络（GCN）来从骨架图序列中提取时空步态特征。</p>
<p>这两个模块的输出通道数被设定为相同（128个通道），以便于后续的融合处理。</p>
<blockquote>
<p>SiEM 和 SkEM 模块在框架中可以替换为其他步态识别网络。更复杂的结构可能会带来更好的性能提升，但这并不是该论文提出方法的优先目标，因此它们可以被视为一种基线方法。</p>
</blockquote>
<h3 id="3-3-SFM-空间融合模块Spatial-Fusion-Module">3.3 SFM(空间融合模块Spatial Fusion Module)</h3>
<h4 id="1-设计动机-Motivation-：">1. <strong>设计动机 (Motivation)</strong>：</h4>
<ul>
<li>论文指出，之前的方法在融合多个步态模态（例如轮廓和骨架）时，通常采用全局特征级别的简单融合方法（例如特征拼接），这种融合方式缺乏解释性和灵活性。</li>
<li>这些方法通常依赖于每种模态的预训练模型，更像是“集成模型”而不是“多模态融合模型”。</li>
</ul>
<p><img src="/img/MMGaitFormer.assets/image-20241010111324162.png" alt="image-20241010111324162"></p>
<ul>
<li>为了应对这些问题，论文提出了基于共注意力的融合模块，该模块通过注意力机制来解释身体部位的外部形状（轮廓）和内部结构（骨架）的融合（即<strong>细粒度身体部位融合</strong>）。</li>
</ul>
<p><img src="/img/MMGaitFormer.assets/image-20241010112006243.png" alt="image-20241010112006243"></p>
<h4 id="2-细粒度身体部位融合-Fine-grained-Body-Parts-Fusion-：">2. <strong>细粒度身体部位融合 (Fine-grained Body Parts Fusion)</strong>：</h4>
<ul>
<li>人体在行走时，头部、躯干和腿部等不同部位有着明显的不同形状和运动模式。论文认为，空间特征融合应该是细粒度的。</li>
<li>论文提出了一种基于人体先验知识的简单但有效的策略，将人体的不同部位（头、躯干、腿部）进行分区，并限制轮廓和骨架的特征在对应的身体部位之间进行交互，来实现更加精细的空间特征融合。</li>
<li>这种方法不仅能够更好地利用人体的先验信息，提高融合的解释性，还可以通过减少计算量降低模型的复杂性，并有效减少过拟合的风险。</li>
</ul>
<h4 id="3-空间共注意力聚合-Spatial-Co-attention-Aggregation-：">3. <strong>空间共注意力聚合 (Spatial Co-attention Aggregation)</strong>：</h4>
<ul>
<li>该模块通过<strong>共注意力机制</strong>实现轮廓和骨架的交互。这种机制能够在轮廓部分和骨架关节之间建立各种空间关系，利用两种数据模态的互补优势，形成更鲁棒的步态特征表示。</li>
<li>与单独使用交叉注意力的模块相比，共注意力结构可以更好地融合骨架和轮廓的互补信息。</li>
<li>通过构造注意力掩码（Attention Mask）来限制注意力的计算范围，不仅减少了基于Transformer的方法过拟合的风险，还提升了模型的可解释性。</li>
</ul>
<h4 id="4-操作流程-Operation-：">4. <strong>操作流程 (Operation)</strong>：</h4>
<ul>
<li>该模块的输入是轮廓的空间特征嵌入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mi>s</mi><mi>S</mi></msubsup></mrow><annotation encoding="application/x-tex">f_s^S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0883em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> 和骨架的空间特征嵌入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mi>k</mi><mi>S</mi></msubsup></mrow><annotation encoding="application/x-tex">f_k^S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1244em;vertical-align:-0.2831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4169em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span></span></span></span>，然后利用基于注意力的机制对两者进行交互。</li>
<li>交互的结果通过一个前馈神经网络（FFN）层，最终生成空间特征表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">Y_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li>
<li>具体操作中，首先通过最大池化层在时间轴上进行池化，得到用于空间融合的特征嵌入。然后将这些嵌入输入到共注意力结构中进行特征融合，最后生成空间特征表示。</li>
<li><img src="/img/MMGaitFormer.assets/image-20241010112016465.png" alt="image-20241010112016465"></li>
<li><strong>图五</strong>我们提出的空间融合模块（a）和时间融合模块（b）的网络结构，两者都包含共同注意结构。每个共同注意结构由两个互连的交叉注意块组成。</li>
</ul>
<h3 id="3-4-时间融合模块（Temporal-Fusion-Module）">3.4 时间融合模块（Temporal Fusion Module）</h3>
<h4 id="1-设计动机-Motivation-：-2">1. <strong>设计动机 (Motivation)</strong>：</h4>
<ul>
<li>步态识别作为基于视频的识别任务，时间帧之间的关系包含了独特的生物特征，这对于识别是非常关键的。</li>
<li>在该部分中，论文提出了一个基于注意力机制的<strong>时间融合模块（TFM）</strong>，用于聚合来自轮廓和骨架的时间特征。</li>
<li>由于步态是一个周期性且对称的过程，论文提出了<strong>周期位置嵌入（CPE，Cycle Position Embedding）</strong>，用于更好地建模和对齐两个模态的时间信息。</li>
</ul>
<h4 id="2-周期位置嵌入-Cycle-Position-Embedding-CPE-：">2. <strong>周期位置嵌入 (Cycle Position Embedding, CPE)</strong>：</h4>
<ul>
<li><strong>周期位置嵌入 (Cycle Position Embedding, CPE)</strong> 是第3.4节中介绍的一个重要概念，用于步态识别中的时间建模。它的目的是通过引入步态的周期性特征，提升模型捕捉时间信息的能力。</li>
<li>普通的注意力机制不能区分输入序列中特征的位置信息。现有的视觉Transformer方法（例如ViT）通常使用位置嵌入来指示输入特征的顺序，但这对步态识别任务不太理想，因为步态是一个周期性的过程。</li>
<li>论文提出了一种周期位置嵌入（CPE）来应对这一问题。CPE通过模拟步态周期过程，重复位置嵌入，直到它与特征嵌入序列的长度相同。这样，模型能够处理任意长度的序列。</li>
<li>该方法不仅模拟了步态周期过程，更有效地捕捉了步态中的周期性特征。此外，CPE通过限制可学习参数的数量，降低了过拟合风险，帮助模型更好地收敛。</li>
</ul>
<p><img src="/img/MMGaitFormer.assets/image-20241010155155189.png" alt="image-20241010155155189"></p>
<h4 id="3-时间共注意力聚合-Temporal-Co-attention-Aggregation-：">3. <strong>时间共注意力聚合 (Temporal Co-attention Aggregation)</strong>：</h4>
<ul>
<li>与空间融合模块类似，时间融合模块也设计了一个<strong>共注意力模块</strong>，用于融合和聚合两个模态的时间信息。</li>
<li>由于轮廓和骨架的时间特征差异较大，模型使用了两个单独的前馈神经网络（FFN）层来分别映射这两个模态的时间特征。</li>
<li>最终，模型会为轮廓和骨架生成相应的时间融合特征表示。</li>
</ul>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>CVPR</tag>
        <tag>计算机视觉</tag>
        <tag>多模态</tag>
        <tag>步态识别</tag>
      </tags>
  </entry>
  <entry>
    <title>VideoLLM最新研究</title>
    <url>/2024/11/22/VideoLLM%E6%9C%80%E6%96%B0%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h1>VideoLLM最新研究</h1>
<h2 id="MovieLLM-Enhancing-Long-Video-Understanding-with-AI-Generated-Movies">MovieLLM: Enhancing Long Video Understanding with AI-Generated Movies</h2>
<p><strong>MovieLLM：利用人工智能生成的电影增强对长视频的理解（复旦大学）</strong></p>
<p>**地址：**<a href="https://arxiv.org/abs/2403.01422">https://arxiv.org/abs/2403.01422</a></p>
<blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/xixiaoyaoww/article/details/136651416">https://blog.csdn.net/xixiaoyaoww/article/details/136651416</a></p>
<p><a href="https://www.aihub.cn/tools/llm/moviellm/">MovieLLM-通过AI生成电影来增强长视频理解的框架 - AIHub | AI导航</a></p>
</blockquote>
<p><strong>时间</strong>：2024.6.24(v2)</p>
<h3 id="1-摘要">1.<strong>摘要</strong></h3>
<p>多模态模型的发展标志着机器理解视频的重大进步。这些模型在分析短视频片段方面表现出了良好的前景。然而，当涉及到电影等较长的格式时，它们往往就显得力不从心了。主要的障碍是缺乏高质量、多样化的视频数据，以及收集或注释此类数据所需的大量工作。面对这些挑战，我们提出了 MovieLLM，这是一个新颖的框架，旨在合成一致且高质量的视频数据以进行指令调整。该管道经过精心设计，可通过改进文本反转技术以及 GPT-4 强大的文本生成功能来控制视频的风格。作为第一个这样做的框架，我们的方法以其灵活性和可扩展性而脱颖而出，使用户能够仅使用一个描述来创建自定义电影。这使其成为传统数据收集方法的更好替代方案。我们进行了广泛的实验，验证了 MovieLLM 生成的数据显著提高了多模态模型在理解复杂视频叙事方面的表现，克服了现有数据集在稀缺性和偏见方面的局限性。</p>
<h3 id="2-理解">2.<strong>理解</strong></h3>
<p>利用GPT-4并引导文图生成模型生成一致的电影级视频关键帧，利用该框架生成的长视频指令数据，显著提高了多模态模型在理解复杂视频叙事方面的性能，让大模型更懂电影。</p>
<p>该方法包括三个相互关联的步骤：电影情节生成、风格固定化过程和视频指导数据生成。仅凭简单的主题描述，就能够生成整部电影的关键帧。</p>
<p>整个流程如下图所示：首先利用GPT-4基于主题短语生成整个电影情节；利用文本反转技术将从情节生成的风格描述固定到扩散模型的潜在空间，引导其生成具有固定风格的帧。整合先前获取的所有信息，最终生成一致的关键帧和相应的问答对。</p>
<ul>
<li><strong>电影情节生成（Movie Plot Generation）</strong>：我们没有将绘图生成限制为传统数据源（例如网络或现有数据集），而是利用 GPT-4 的功能来生成合成数据。通过提供主题、概述和样式等特定元素，我们指导 GPT-4 生成适合后一代流程的电影级关键帧描述。</li>
<li><strong>风格固定过程(Style Immobilization)</strong>：通过巧妙地采用文本反转（Gal et al., 2022），我们将从脚本生成的风格描述固定到扩散模型的潜在空间中。这种方法引导模型以一致的风格生成场景，同时在统一的审美下保持多样性。</li>
<li><strong>视频指令数据生成（video instruction data generation）</strong>:通过将 GPT-4 强大的生成能力与开发的风格引导扩散模型相结合，我们生成风格一致的关键帧和相应的 QA 对，从而形成全面的指令调优语料库。</li>
</ul>
<p>我们的方法允许在不受数据量限制的情况下生成数据集，确保生成的内容具有高度的多样性。此外，它还有助于自动注释，从而显着减少对体力劳动的需求和相关成本。这些优势增强了长视频理解数据集创建的可扩展性、丰富性和效率，标志着该领域的重大飞跃。</p>
<p><img src="/img/VideoLLM%E6%9C%80%E6%96%B0%E7%A0%94%E7%A9%B6/image-20241122185209461.png" alt="image-20241122185209461"></p>
<blockquote>
<p>我们提出的用于生成长视频指令调整数据集的管道。只需简单的主题描述，我们的流程就能够生成整部电影的关键帧。该流程大致可以分为三个阶段：</p>
<p>（a）电影情节生成，我们使用 GPT-4 根据主题短语生成整个电影情节。</p>
<p>（b）风格固定化过程，我们利用文本反转技术将情节生成的风格描述固定到扩散模型的潜在空间中，引导其生成具有固定风格的框架。</p>
<p>©视频指令数据生成，我们整合之前获得的所有信息，最终生成一致的关键帧和相应的问答对。</p>
</blockquote>
<p><strong>总结</strong>：类似于大模型在电影领域的效果增强？</p>
<h2 id="Movie101v2-Improved-Movie-Narration-Benchmark">Movie101v2: Improved Movie Narration Benchmark</h2>
<p><strong>Movie101v2：改进的电影叙述基准（人民大学）</strong></p>
<p><strong>paper</strong>：<a href="https://arxiv.org/pdf/2404.13370">https://arxiv.org/pdf/2404.13370</a></p>
<p><strong>时间</strong>：2024.10.18（v2）</p>
<h3 id="1-摘要-2">1. 摘要</h3>
<p>自动电影旁白旨在生成与视频一致的情节描述，以帮助视障观众。与标准视频字幕不同，它不仅涉及描述关键视觉细节，还涉及推断多个电影镜头中展开的情节，从而提出独特而复杂的挑战。为了推动这一领域的发展，我们引入了  Movie101v2，这是一个专门为电影叙事设计的大规模双语数据集，具有增强的数据质量。重新审视该任务，我们建议将自动电影叙述的最终目标分解为三个渐进阶段，提供清晰的路线图和相应的评估指标。基于我们的新基准，我们对包括 GPT-4V  在内的一系列大型视觉语言模型进行了基线分析，并对叙述生成中的挑战进行了深入分析。我们的研究结果强调，实现适用的电影叙事生成是一个令人着迷的目标，需要进行大量研究。</p>
<p><img src="/img/VideoLLM%E6%9C%80%E6%96%B0%E7%A0%94%E7%A9%B6/image-20241122190408521.png" alt="image-20241122190408521"></p>
<blockquote>
<p>来自其他数据集（左）和 Movie101v2（右）的示例，其中案例来自 Goodbye Mr. Loser。</p>
</blockquote>
<h3 id="2-理解-2">2. 理解</h3>
<p>不错的任务以及描述，要求比较深入的视频理解能力，如果实现可以对其他任务作出帮助，目前的结果难以满足实际应用需求。</p>
<p><img src="/img/VideoLLM%E6%9C%80%E6%96%B0%E7%A0%94%E7%A9%B6/image-20241122192755452.png" alt="image-20241122192755452"></p>
<blockquote>
<p>我们的模型框架。(a) 用于 MCN 任务的 RMN；(b) 用于 TNG 任务的全局镜头检索和局部时序定位。</p>
<p>MCN：电影片段解说、RMN：叙述生成框架、TNG：时序定位（不用管）</p>
</blockquote>
<p>总结：一个数据集Movie101，随电影自动生成旁白（MCN），比较有意思。</p>
<h2 id="Streaming-Long-Video-Understanding-with-Large-Language-Models">Streaming Long Video Understanding with Large Language Models</h2>
<p><strong>使用大型语言模型流式传输长视频理解（港中文）</strong></p>
<p><strong>paper</strong>：<a href="https://arxiv.org/pdf/2405.16009">https://arxiv.org/pdf/2405.16009</a></p>
<p><strong>时间</strong>：2024.5.25（v2）</p>
<h3 id="1-摘要-3">1. 摘要</h3>
<p>本文提出了 VideoStreaming，这是一种用于视频理解的高级视觉语言大型模型  (VLLM)，它能够通过流式编码和自适应选择的恒定数量的视频标记来理解任意长度的视频。视觉语言领域视频理解的挑战主要在于从长视频中提取的大量标记造成的巨大计算负担。以前的工作依靠稀疏采样或帧压缩来减少标记。然而，此类方法要么忽视长时间跨度的时间信息，要么牺牲空间细节，导致压缩有缺陷。为了解决这些限制，我们的视频流有两个核心设计：**内存传播流编码和自适应内存选择。**内存传播流编码架构将长视频分割成短剪辑，并使用传播内存顺序对每个剪辑进行编码。在每次迭代中，我们利用前一个剪辑的编码结果作为历史内存，将其与当前剪辑集成以提取压缩表示，该表示封装了截至当前时间戳的视频内容。该方法不仅将长期时间动态合并到流编码过程中，而且还产生固定长度的存储器作为任意长视频的全局表示。编码过程结束后，自适应记忆选择策略从所有历史记忆中选择恒定数量的与问题相关的记忆，并将它们输入 LLM  以生成信息丰富的响应。与问题相关的选择减少了记忆中的冗余，从而实现高效、精确的视频理解。同时，解开的视频提取和推理设计使得LLM可以通过直接选择相应的记忆来回答有关视频的不同问题，而无需为每个问题对整个视频进行编码。通过大量的实验，我们的模型在长视频基准上实现了卓越的性能和更高的效率，展示了对详细问题解答的精确时间理解。</p>
<h3 id="2-理解-3">2. 理解</h3>
<p>提出一种让LLM可以适配长短视频的视频处理方案，[标记一下，待续]。</p>
<p><img src="/img/VideoLLM%E6%9C%80%E6%96%B0%E7%A0%94%E7%A9%B6/image-20241122194217566.png" alt="image-20241122194217566"></p>
<blockquote>
<p>图 1a  显示了视频流的概述，其中我们将长视频分割成短剪辑，并将每个剪辑迭代编码到紧凑的内存中。然后，根据具体问题，我们选择恒定数量的相关记忆子集作为LLM的输入以产生答案。 ✓ 和 ✗  分别表示选定和未选定的存储器。图1b说明了每次流编码迭代的详细过程。我们参考特定时间戳和前一个剪辑的历史记忆将当前剪辑特征编码为压缩表示。</p>
</blockquote>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>大模型</tag>
        <tag>计算机视觉</tag>
        <tag>多模态</tag>
        <tag>视频理解</tag>
      </tags>
  </entry>
  <entry>
    <title>测试_第一篇文章</title>
    <url>/2024/11/02/test/</url>
    <content><![CDATA[<p>this is my first article</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/cate_bottom.css</url>
    <content><![CDATA[#categoryBar {
    width: 100% !important;
  }
  ul.categoryBar-list {
    margin: 5px 5px 0 5px !important;
    padding: 0 !important;
  }
  li.categoryBar-list-item {
    font-weight: bold;
    display: inline-block;
    height: 180px !important;
    margin: 5px 0.5% 0 0.5% !important;
    background-image: linear-gradient(rgba(0,0,0,0.4) 25%, rgba(16,16,16,0) 100%);
    border-radius: 10px;
    padding: 25px 0 25px 25px !important;
    box-shadow: rgba(50,50,50,0.3) 50px 50px 50px 50px inset;
    overflow: hidden;
    background-size: 100% !important;
    background-position: center !important;
  }
  li.categoryBar-list-item:hover {
    background-size: 110% !important;
    box-shadow: inset 500px 50px 50px 50px rgba(50,50,50,0.6);
  }
  li.categoryBar-list-item:hover span.categoryBar-list-descr {
    transition: all 0.5s;
    transform: translate(-100%, 0);
  }
  a.categoryBar-list-link {
    color: #fff !important;
    font-size: 20px !important;
  }
  a.categoryBar-list-link::before {
    content: '|' !important;
    color: #fff !important;
    font-size: 20px !important;
  }
  a.categoryBar-list-link:after {
    content: '';
    position: relative;
    width: 0;
    bottom: 0;
    display: block;
    height: 3px;
    border-radius: 3px;
    background-color: #fff;
  }
  a.categoryBar-list-link:hover:after {
    width: 90%;
    left: 1%;
    transition: all 0.5s;
  }
  span.categoryBar-list-count {
    display: block !important;
    color: #fff !important;
    font-size: 20px !important;
  }
  span.categoryBar-list-count::before {
    content: '\f02d' !important;
    padding-right: 15px !important;
    display: inline-block;
    font-weight: 600;
    font-style: normal;
    font-variant: normal;
    font-family: 'Font Awesome 6 Free';
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
  }
  span.categoryBar-list-descr {
    padding: 5px;
    display: block !important;
    color: #fff !important;
    font-size: 20px !important;
    position: relative;
    right: -100%;
  }
  @media screen and (max-width: 650px) {
    li.categoryBar-list-item {
      width: 48% !important;
      height: 150px !important;
      margin: 5px 1% 0 1% !important;
    }
  }]]></content>
  </entry>
  <entry>
    <title>关于</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h1>Github贡献图</h1>
<img src="https://ghchart.rshah.org/zlatan-zzz" alt="zlatan-zzz's Github chart" />
<h1>文章贡献图</h1>
<div id="posts-calendar" class="js-pjax"></div>
<h1>标签统计图</h1>
<div id="tags-chart" data-length="8" class="js-pjax"></div>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/custom.css</url>
    <content><![CDATA[/* 页脚与头图透明 */
#footer {
  background: transparent !important;
}
#page-header {
  background: transparent !important;
}

/* 白天模式遮罩透明 */
#footer::before {
  background: transparent !important;
}
#page-header::before {
  background: transparent !important;
}

/* 夜间模式遮罩透明 */
[data-theme="dark"] #footer::before {
  background: transparent !important;
}
[data-theme="dark"] #page-header::before {
  background: transparent !important;
}

/* 背景宇宙星光  */
#universe{
  display: block;
  position: fixed;
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */
  z-index: -1;
}

/* 侧边栏个人信息卡片动态渐变色 */
#aside-content > .card-widget.card-info {
  background: linear-gradient(
    -45deg,
    #e8d8b9,
    #eccec5,
    #a3e9eb,
    #bdbdf0,
    #eec1ea
  );
  box-shadow: 0 0 5px rgb(66, 68, 68);
  position: relative;
  background-size: 400% 400%;
  -webkit-animation: Gradient 10s ease infinite;
  -moz-animation: Gradient 10s ease infinite;
  animation: Gradient 10s ease infinite !important;
}
@-webkit-keyframes Gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}
@-moz-keyframes Gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}
@keyframes Gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* 黑夜模式适配 */
[data-theme="dark"] #aside-content > .card-widget.card-info {
  background: #191919ee;
}

/* 个人信息Follow me按钮 */
#aside-content > .card-widget.card-info > #card-info-btn {
  background-color: #3eb8be;
  border-radius: 8px;
}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/runtime.js</url>
    <content><![CDATA[var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);var e=new Date("10/28/2024 00:00:00"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),o=new Date("10/28/2024 00:00:00"),n=(now-o)/1e3/60/60/24,r=Math.floor(n),i=(now-o)/1e3/60/60-24*r,s=Math.floor(i);1==String(s).length&&(s="0"+s);var d=(now-o)/1e3/60-1440*r-60*s,l=Math.floor(d);1==String(l).length&&(l="0"+l);var g=(now-o)/1e3-86400*r-3600*s-60*l,b=Math.round(g);1==String(b).length&&(b="0"+b);let c="";c=s<18&&s>=9?`<br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`:`<br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=c)}setInterval((()=>{createtime()}),1e3);]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/gitzone.js</url>
    <content><![CDATA[function GitCalendarInit(git_gitapiurl, git_color, git_user) {
    if (document.getElementById('git_container')) {
      var git_canlendar = (git_user, git_gitapiurl, git_color) => {
        var git_fixed = 'fixed';
        var git_px = 'px';
        var git_month = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];
        var git_monthchange = [];
        var git_oneyearbeforeday = '';
        var git_thisday = '';
        var git_amonthago = '';
        var git_aweekago = '';
        var git_weekdatacore = 0;
        var git_datacore = 0;
        var git_total = 0;
        var git_datadate = '';
        var git_git_data = [];
        var git_positionplusdata = [];
        var git_firstweek = [];
        var git_lastweek = [];
        var git_beforeweek = [];
        var git_thisweekdatacore = 0;
        var git_mounthbeforeday = 0;
        var git_mounthfirstindex = 0;
        var git_crispedges = 'crispedges';
        var git_thisdayindex = 0;
        var git_amonthagoindex = 0;
        var git_amonthagoweek = [];
        var git_firstdate = [];
        var git_first2date = [];
        var git_montharrbefore = [];
        var git_monthindex = 0;
  
        var retinaCanvas = (canvas, context, ratio) => {
          if (ratio > 1) {
            var canvasWidth = canvas.width;
            var canvasHeight = canvas.height;
            canvas.width = canvasWidth * ratio;
            canvas.height = canvasHeight * ratio;
            canvas.style.width = '100%';
            canvas.style.height = canvasHeight + 'px';
            context.scale(ratio, ratio);
          }
        }
  
        var responsiveChart = () => {
          if (document.getElementById("gitcanvas")) {
            var git_tooltip_container = document.getElementById('git_tooltip_container');
            var ratio = window.devicePixelRatio || 1
            var git_x = '';
            var git_y = '';
            var git_span1 = '';
            var git_span2 = '';
            var git_calendar_c = document.getElementById("gitcanvas");
            git_calendar_c.style.width = '100%';
            git_calendar_c.style.height = '';
            var cmessage = document.getElementById("gitmessage");
            var git_calendar_ctx = git_calendar_c.getContext("2d");
            width = git_calendar_c.width = document.getElementById("gitcalendarcanvasbox").offsetWidth;
            height = git_calendar_c.height = 9 * 0.96 * git_calendar_c.width / git_data.length;
            retinaCanvas(git_calendar_c, git_calendar_ctx, ratio)
            var linemaxwitdh = height / 9;
            var lineminwitdh = 0.8 * linemaxwitdh;
            var setposition = {
              x: 0.02 * width,
              y: 0.025 * width
            };
            for (var week in git_data) {
              weekdata = git_data[week];
              for (var day in weekdata) {
                var dataitem = {
                  date: "",
                  count: "",
                  x: 0,
                  y: 0
                };
                git_positionplusdata.push(dataitem);
                git_calendar_ctx.fillStyle = git_thiscolor(git_color, weekdata[day].count);
                setposition.y = Math.round(setposition.y * 100) / 100;
                dataitem.date = weekdata[day].date;
                dataitem.count = weekdata[day].count;
                dataitem.x = setposition.x;
                dataitem.y = setposition.y;
                git_calendar_ctx.fillRect(setposition.x, setposition.y, lineminwitdh, lineminwitdh);
                setposition.y = setposition.y + linemaxwitdh
              }
              setposition.y = 0.025 * width;
              setposition.x = setposition.x + linemaxwitdh;
            }
            if (document.body.clientWidth > 700) {
              git_calendar_ctx.font = "600  Arial";
              git_calendar_ctx.fillStyle = '#aaa';
              git_calendar_ctx.fillText("日", 0, 1.9 * linemaxwitdh);
              git_calendar_ctx.fillText("二", 0, 3.9 * linemaxwitdh);
              git_calendar_ctx.fillText("四", 0, 5.9 * linemaxwitdh);
              git_calendar_ctx.fillText("六", 0, 7.9 * linemaxwitdh);
              var monthindexlist = git_calendar_c.width / 24;
              for (var index in git_monthchange) {
                git_calendar_ctx.fillText(git_monthchange[index], monthindexlist, 0.7 * linemaxwitdh);
                monthindexlist = monthindexlist + git_calendar_c.width / 12
              }
            }
            git_calendar_c.onmousemove = function(event) {
              if (document.querySelector('.gitmessage')) {
                git_tooltip_container.innerHTML = ""
              }
              getMousePos(git_calendar_c, event)
            };
            git_tooltip_container.onmousemove = function(event) {
              if (document.querySelector('.gitmessage')) {
                git_tooltip_container.innerHTML = ""
              }
            };
  
            var getMousePos = (canvas, event) => {
              var rect = canvas.getBoundingClientRect();
              var x = event.clientX - rect.left * (canvas.width / rect.width);
              var y = event.clientY - rect.top * (canvas.height / rect.height);
              for (var item of git_positionplusdata) {
                var lenthx = x - item.x;
                var lenthy = y - item.y;
                if (0 < lenthx && lenthx < lineminwitdh) {
                  if (0 < lenthy && lenthy < lineminwitdh) {
                    git_span1 = item.date;
                    git_span2 = item.count;
                    git_x = event.clientX - 100;
                    git_y = event.clientY - 60;
                    html = tooltip_html(git_x, git_y, git_span1, git_span2);
                    append_div_gitcalendar(git_tooltip_container, html)
                  }
                }
              }
            }
          }
        }
  
        var addlastmonth = () => {
          if (git_thisdayindex === 0) {
            thisweekcore(52);
            thisweekcore(51);
            thisweekcore(50);
            thisweekcore(49);
            thisweekcore(48);
            git_thisweekdatacore += git_firstdate[6].count;
            git_amonthago = git_firstdate[6].date
          } else {
            thisweekcore(52);
            thisweekcore(51);
            thisweekcore(50);
            thisweekcore(49);
            thisweek2core();
            git_amonthago = git_first2date[git_thisdayindex - 1].date
          }
        }
  
        var thisweek2core = () => {
          for (var i = git_thisdayindex - 1; i < git_first2date.length; i++) {
            git_thisweekdatacore += git_first2date[i].count
          }
        }
  
        var thisweekcore = (index) => {
          for (var item of git_data[index]) {
            git_thisweekdatacore += item.count
          }
        }
  
        var addlastweek = () => {
          for (var item of git_lastweek) {
            git_weekdatacore += item.count
          }
        }
  
        var addbeforeweek = () => {
          for (var i = git_thisdayindex; i < git_beforeweek.length; i++) {
            git_weekdatacore += git_beforeweek[i].count
          }
        }
  
        var addweek = (data) => {
          if (git_thisdayindex === 6) {
            git_aweekago = git_lastweek[0].date;
            addlastweek()
          } else {
            lastweek = data.contributions[51];
            git_aweekago = lastweek[git_thisdayindex + 1].date;
            addlastweek();
            addbeforeweek()
          }
        }
  
        fetch(git_gitapiurl).then(data => data.json()).then(data => {
          if (document.getElementById('git_loading')) {
            document.getElementById('git_loading').remove()
          };
          git_data = data.contributions;
          git_total = data.total;
          git_first2date = git_data[48];
          git_firstdate = git_data[47];
          git_firstweek = data.contributions[0];
          git_lastweek = data.contributions[52];
          git_beforeweek = data.contributions[51];
          git_thisdayindex = git_lastweek.length - 1;
          git_thisday = git_lastweek[git_thisdayindex].date;
          git_oneyearbeforeday = git_firstweek[0].date;
          git_monthindex = git_thisday.substring(5, 7) * 1;
          git_montharrbefore = git_month.splice(git_monthindex, 12 - git_monthindex);
          git_monthchange = git_montharrbefore.concat(git_month);
          addweek(data);
          addlastmonth();
          var html = git_main_box(git_monthchange, git_data, git_user, git_color, git_total, git_thisweekdatacore, git_weekdatacore, git_oneyearbeforeday, git_thisday, git_aweekago, git_amonthago);
          append_div_gitcalendar(git_container, html);
          responsiveChart()
        }).catch(function(error) {
          console.log(error)
        });
        window.onresize = function() {
          responsiveChart()
        };
        window.onscroll = function() {
          if (document.querySelector('.gitmessage')) {
            git_tooltip_container.innerHTML = ""
          }
        };
        var git_thiscolor = (color, x) => {
          if (x === 0) {
            var i = parseInt(x / 2);
            return color[0]
          } else if (x < 2) {
            return color[1]
          } else if (x < 20) {
            var i = parseInt(x / 2);
            return color[i]
          } else {
            return color[9]
          }
        };
        var tooltip_html = (x, y, span1, span2) => {
          var html = '';
          html += `<div class="gitmessage" style="top:${y}px;left: ${x}px;position: fixed;z-index:9999">
                            <div class="angle-wrapper" style="display:block;">
                              <span>${span1}&nbsp;</span>
                              <span>${span2}次上传</span>
                            </div>
                          </div>`;
          return html
        };
        var git_canvas_box = () => {
          var html = `<div id="gitcalendarcanvasbox">
                                <canvas id="gitcanvas" style="animation: none;">
                                </canvas>
                              </div>`;
          return html
        };
        var git_info_box = (user, color) => {
          var html = '';
          html += `<div id="git_tooltip_container"></div>
                          <div class="contrib-footer clearfix mt-1 mx-3 px-3 pb-1">
                            <div class="float-left text-gray">数据来源
                              <a href="https://github.com/${user}" target="blank">@${user}</a>
                            </div>
                            <div class="contrib-legend text-gray">Less
                              <ul class="legend">
                              <li style="background-color:${color[0]}"></li>
                              <li style="background-color:${color[2]}"></li>
                              <li style="background-color:${color[4]}"></li>
                              <li style="background-color:${color[6]}"></li>
                              <li style="background-color:${color[8]}"></li>
                              </ul>More
                            </div>
                          </div>`;
          return html
        };
        var git_main_box = (monthchange, git_data, user, color, total, thisweekdatacore, weekdatacore, oneyearbeforeday, thisday, aweekago, amonthago) => {
          var html = '';
          var canvasbox = git_canvas_box();
          var infobox = git_info_box(user, color);
          html += `<div class="position-relative">
                            <div class="border py-2 graph-before-activity-overview">
                              <div class="js-gitcalendar-graph mx-md-2 mx-3 d-flex flex-column flex-items-end flex-xl-items-center overflow-hidden pt-1 is-graph-loading graph-canvas gitcalendar-graph height-full text-center">
                                ${canvasbox}
                              </div>
                              ${infobox}
                            </div>
                          </div>`;
  
          html += `<div style="display:flex;width:100%">
                            <div class="contrib-column contrib-column-first table-column">
                              <span class="text-muted">过去一年提交</span>
                              <span class="contrib-number">${total}</span>
                              <span class="text-muted">${oneyearbeforeday}&nbsp;-&nbsp;${thisday}</span>
                            </div>
                            <div class="contrib-column table-column">
                              <span class="text-muted">最近一月提交</span>
                              <span class="contrib-number">${thisweekdatacore}</span>
                              <span class="text-muted">${amonthago}&nbsp;-&nbsp;${thisday}</span>
                            </div>
                            <div class="contrib-column table-column">
                              <span class="text-muted">最近一周提交</span>
                              <span class="contrib-number">${weekdatacore}</span>
                              <span class="text-muted">${aweekago}&nbsp;-&nbsp;${thisday}</span>
                            </div>
                          </div>`;
          return html
        };
      };
      var append_div_gitcalendar = (parent, text) => {
        if (typeof text === 'string') {
          var temp = document.createElement('div');
          temp.innerHTML = text;
          var frag = document.createDocumentFragment();
          while (temp.firstChild) {
            frag.appendChild(temp.firstChild)
          }
          parent.appendChild(frag)
        } else {
          parent.appendChild(text)
        }
      };
      var git_container = document.getElementById('git_container');
      var git_loading = document.getElementById('git_loading');
      git_canlendar(git_user, git_gitapiurl, git_color)
    }
  }]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/universe.js</url>
    <content><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};
dark()]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
